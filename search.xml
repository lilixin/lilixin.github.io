<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[a test]]></title>
      <url>/2017/08/29/a-test/</url>
      <content type="html"><![CDATA[<p> 哈哈</p>
]]></content>
      
        <categories>
            
            <category> ittech </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[JDK动态代理的实现及原理]]></title>
      <url>/2017/08/29/JDK%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/</url>
      <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>关于JDK的动态代理，最为人熟知的可能要数spring AOP的实现，默认情况下，Spring AOP的实现对于接口来说就是使用的JDK的动态代理来实现的，而对于类的代理使用CGLIB来实现。那么，什么是JDK的动态代理呢？</p>
<p>JDK的动态代理，就是在程序运行的过程中，根据被代理的接口来动态生成代理类的class文件，并加载运行的过程。</p>
<h1 id="使用JDK代理"><a href="#使用JDK代理" class="headerlink" title="使用JDK代理"></a>使用JDK代理</h1><p>JDK提供了Java.lang.reflect.Proxy类来实现动态代理，可通过它的newProxyInstance来获得代理实现类。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">newProxyInstance</span><span class="params">(ClassLoader loader,Class&lt;?&gt;[] interfaces,InvocationHandler h)</span></span></div><div class="line"><span class="function">        <span class="keyword">throws</span> IllegalArgumentException</span></div><div class="line"><span class="function">    </span>&#123;......&#125;</div></pre></td></tr></table></figure>
<p>根据方法定义可知，此方法需要三个参数 下面分别构造</p>
<h2 id="被代理的接口"><a href="#被代理的接口" class="headerlink" title="被代理的接口"></a>被代理的接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Created by lilixin on 29/08/2017.</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HelloWorld</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sayHello</span><span class="params">(String name)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="接口的实现类"><a href="#接口的实现类" class="headerlink" title="接口的实现类"></a>接口的实现类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span> lilixin</span></div><div class="line"><span class="comment"> * <span class="doctag">@description</span></span></div><div class="line"><span class="comment"> * <span class="doctag">@create</span> 2017-08-29 4:46 PM</span></div><div class="line"><span class="comment"> **/</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyHelloWorld</span> <span class="keyword">implements</span> <span class="title">HelloWorld</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"hello "</span>+name);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="实现一个InvocationHandler"><a href="#实现一个InvocationHandler" class="headerlink" title="实现一个InvocationHandler"></a>实现一个InvocationHandler</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</div><div class="line"><span class="keyword">import</span> java.lang.reflect.Method;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span> lilixin</span></div><div class="line"><span class="comment"> * <span class="doctag">@description</span></span></div><div class="line"><span class="comment"> * <span class="doctag">@create</span> 2017-08-29 4:21 PM</span></div><div class="line"><span class="comment"> **/</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyProxyInvocationHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Object target;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyProxyInvocationHandler</span><span class="params">(Object target)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>();</div><div class="line">        <span class="keyword">this</span>.target = target;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</div><div class="line">        System.out.println(<span class="string">"invoke begin"</span>);</div><div class="line">        Object invoke = method.invoke(target,args);</div><div class="line">        System.out.println(<span class="string">"invoke end"</span>);</div><div class="line">        <span class="keyword">return</span> invoke;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span> lilixin</span></div><div class="line"><span class="comment"> * <span class="doctag">@description</span> 测试类</span></div><div class="line"><span class="comment"> * <span class="doctag">@create</span> 2017-08-29 4:38 PM</span></div><div class="line"><span class="comment"> **/</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicProxyTest</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="comment">//创建InvocationHandler</span></div><div class="line">        MyProxyInvocationHandler invocationHandler = <span class="keyword">new</span> MyProxyInvocationHandler(<span class="keyword">new</span> MyHelloWorld());</div><div class="line">        HelloWorld world = (HelloWorld)Proxy.newProxyInstance(DynamicProxyTest.class.getClassLoader(), <span class="keyword">new</span> Class[]&#123;HelloWorld.class&#125;, invocationHandler);</div><div class="line">        world.sayHello(<span class="string">"LiLiXin"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输出结果</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">invoke begin</div><div class="line">hello LiLiXin</div><div class="line">invoke end</div></pre></td></tr></table></figure>
<h1 id="原理及实现分析"><a href="#原理及实现分析" class="headerlink" title="原理及实现分析"></a>原理及实现分析</h1><p>从上面可知 JDK的使用很简单，但想要了解他的具体实现过程还是得从源码入手  这里的JDK版本是jdk1.7.0_80</p>
<h2 id="newProxyInstance方法源码"><a href="#newProxyInstance方法源码" class="headerlink" title="newProxyInstance方法源码"></a>newProxyInstance方法源码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">newProxyInstance</span><span class="params">(ClassLoader loader,Class&lt;?&gt;[] interfaces,InvocationHandler h)</span></span></div><div class="line"><span class="function">        <span class="keyword">throws</span> IllegalArgumentException</span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">if</span> (h == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">final</span> Class&lt;?&gt;[] intfs = interfaces.clone();</div><div class="line">        <span class="keyword">final</span> SecurityManager sm = System.getSecurityManager();</div><div class="line">        <span class="keyword">if</span> (sm != <span class="keyword">null</span>) &#123;</div><div class="line">            checkProxyAccess(Reflection.getCallerClass(), loader, intfs);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">//可知这里是生成代理类的地方 应重点关注</span></div><div class="line">        Class&lt;?&gt; cl = getProxyClass0(loader, intfs);</div><div class="line">		<span class="comment">//这里使用我们实现的InvocationHandler来获取代理类的构造函数</span></div><div class="line">   <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">final</span> Constructor&lt;?&gt; cons = cl.getConstructor(constructorParams);</div><div class="line">            <span class="keyword">final</span> InvocationHandler ih = h;</div><div class="line">            <span class="keyword">if</span> (sm != <span class="keyword">null</span> &amp;&amp; ProxyAccessHelper.needsNewInstanceCheck(cl)) &#123;</div><div class="line">                <span class="comment">// create proxy instance with doPrivilege as the proxy class may</span></div><div class="line">                <span class="comment">// implement non-public interfaces that requires a special permission</span></div><div class="line">                <span class="keyword">return</span> AccessController.doPrivileged(<span class="keyword">new</span> PrivilegedAction&lt;Object&gt;() &#123;</div><div class="line">                    <span class="function"><span class="keyword">public</span> Object <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                        <span class="keyword">return</span> newInstance(cons, ih);</div><div class="line">                    &#125;</div><div class="line">                &#125;);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">return</span> newInstance(cons, ih);</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InternalError(e.toString());</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>从源码中可知 代理类是在getProxyClass0(..)方法中生成的，应该重点关注此方法，newInstance(..)方法中只是调用了传入的参数的newInstance方法</p>
<h2 id="getProxyClass0方法源码"><a href="#getProxyClass0方法源码" class="headerlink" title="getProxyClass0方法源码"></a>getProxyClass0方法源码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> Class&lt;?&gt; getProxyClass0(ClassLoader loader, Class&lt;?&gt;... interfaces) &#123;</div><div class="line">  <span class="keyword">if</span> (interfaces.length &gt; <span class="number">65535</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"interface limit exceeded"</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">//JDK对代理进行了缓存，如果已经存在相应的代理类，则直接返回，否则才会通过ProxyClassFactory来创建代理  </span></div><div class="line">        <span class="keyword">return</span> proxyClassCache.get(loader, interfaces);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>具体缓存逻辑我们不需要关心，只需要关注如何生成代理类的，ProxyClassFactory是Proxy类的一个静态内部类，它实现了WeakCache的内部接口BiFunction的apply方法，WeakCache是其代理缓存的实现</p>
<h2 id="ProxyClassFactory源码"><a href="#ProxyClassFactory源码" class="headerlink" title="ProxyClassFactory源码"></a>ProxyClassFactory源码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyClassFactory</span></span></div><div class="line">       implements BiFunction&lt;ClassLoader, Class&lt;?&gt;[], Class&lt;?&gt;&gt;</div><div class="line">   &#123;</div><div class="line">       <span class="comment">// 所有代理类名字的前缀 </span></div><div class="line">       <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String proxyClassNamePrefix = <span class="string">"$Proxy"</span>;</div><div class="line"></div><div class="line">       <span class="comment">//用于生成代理类名字的计数器</span></div><div class="line">       <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> AtomicLong nextUniqueNumber = <span class="keyword">new</span> AtomicLong();</div><div class="line"></div><div class="line">       <span class="meta">@Override</span></div><div class="line">       <span class="keyword">public</span> Class&lt;?&gt; apply(ClassLoader loader, Class&lt;?&gt;[] interfaces) &#123;</div><div class="line"></div><div class="line">           <span class="comment">//省略了部分代码。。。</span></div><div class="line">			<span class="comment">//生成的代理类的包名</span></div><div class="line">           String proxyPkg = <span class="keyword">null</span>;     </div><div class="line"></div><div class="line">           <span class="comment">// 对于非公共接口，代理类的包名与接口的相同  </span></div><div class="line">           <span class="keyword">for</span> (Class&lt;?&gt; intf : interfaces) &#123;</div><div class="line">               <span class="keyword">int</span> flags = intf.getModifiers();</div><div class="line">               <span class="keyword">if</span> (!Modifier.isPublic(flags)) &#123;</div><div class="line">                   String name = intf.getName();</div><div class="line">                   <span class="keyword">int</span> n = name.lastIndexOf(<span class="string">'.'</span>);</div><div class="line">                   String pkg = ((n == -<span class="number">1</span>) ? <span class="string">""</span> : name.substring(<span class="number">0</span>, n + <span class="number">1</span>));</div><div class="line">                   <span class="keyword">if</span> (proxyPkg == <span class="keyword">null</span>) &#123;</div><div class="line">                       proxyPkg = pkg;</div><div class="line">                   &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!pkg.equals(proxyPkg)) &#123;</div><div class="line">                       <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</div><div class="line">                           <span class="string">"non-public interfaces from different packages"</span>);</div><div class="line">                   &#125;</div><div class="line">               &#125;</div><div class="line">           &#125;</div><div class="line"></div><div class="line">           <span class="keyword">if</span> (proxyPkg == <span class="keyword">null</span>) &#123;</div><div class="line">               <span class="comment">// 对于公共接口的包名，默认为com.sun.proxy  </span></div><div class="line">               proxyPkg = ReflectUtil.PROXY_PACKAGE + <span class="string">"."</span>;</div><div class="line">           &#125;</div><div class="line"></div><div class="line">           <span class="comment">//用计数器及包名确定代理类的名字</span></div><div class="line">           <span class="keyword">long</span> num = nextUniqueNumber.getAndIncrement();</div><div class="line">           String proxyName = proxyPkg + proxyClassNamePrefix + num;</div><div class="line"></div><div class="line">            <span class="comment">// 这里才是真正的生成代理类的字节码的地方  </span></div><div class="line">           <span class="keyword">byte</span>[] proxyClassFile = ProxyGenerator.generateProxyClass(</div><div class="line">               proxyName, interfaces);</div><div class="line">           <span class="keyword">try</span> &#123;</div><div class="line">           <span class="comment">// 根据二进制字节码返回相应的Class实例  </span></div><div class="line">               <span class="keyword">return</span> defineClass0(loader, proxyName,</div><div class="line">                                   proxyClassFile, <span class="number">0</span>, proxyClassFile.length);</div><div class="line">           &#125; <span class="keyword">catch</span> (ClassFormatError e) &#123;</div><div class="line">     </div><div class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(e.toString());</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>由源码可知，最终是由sun.misc包中ProxyGenerator类的generateProxyClass()方法生成的代理类</p>
<h2 id="generateProxyClass源码"><a href="#generateProxyClass源码" class="headerlink" title="generateProxyClass源码"></a>generateProxyClass源码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] generateProxyClass(<span class="keyword">final</span> String var0, Class[] var1) &#123;</div><div class="line">       ProxyGenerator var2 = <span class="keyword">new</span> ProxyGenerator(var0, var1);</div><div class="line">       <span class="keyword">final</span> <span class="keyword">byte</span>[] var3 = var2.generateClassFile();</div><div class="line">       <span class="comment">//根据参数决定是否把生成的代理文件保存到本地</span></div><div class="line">       <span class="keyword">if</span>(saveGeneratedFiles) &#123;</div><div class="line">           AccessController.doPrivileged(<span class="keyword">new</span> PrivilegedAction&lt;Void&gt;() &#123;</div><div class="line">               <span class="function"><span class="keyword">public</span> Void <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                   <span class="keyword">try</span> &#123;</div><div class="line">                       <span class="keyword">int</span> var1 = var0.lastIndexOf(<span class="number">46</span>);</div><div class="line">                       Path var2;</div><div class="line">                       <span class="keyword">if</span>(var1 &gt; <span class="number">0</span>) &#123;</div><div class="line">                           Path var3x = Paths.get(var0.substring(<span class="number">0</span>, var1).replace(<span class="string">'.'</span>, File.separatorChar), <span class="keyword">new</span> String[<span class="number">0</span>]);</div><div class="line">                           Files.createDirectories(var3x, <span class="keyword">new</span> FileAttribute[<span class="number">0</span>]);</div><div class="line">                           var2 = var3x.resolve(var0.substring(var1 + <span class="number">1</span>, var0.length()) + <span class="string">".class"</span>);</div><div class="line">                       &#125; <span class="keyword">else</span> &#123;</div><div class="line">                           var2 = Paths.get(var0 + <span class="string">".class"</span>, <span class="keyword">new</span> String[<span class="number">0</span>]);</div><div class="line">                       &#125;</div><div class="line"></div><div class="line">                       Files.write(var2, var3, <span class="keyword">new</span> OpenOption[<span class="number">0</span>]);</div><div class="line">                       <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">                   &#125; <span class="keyword">catch</span> (IOException var4) &#123;</div><div class="line">                       <span class="keyword">throw</span> <span class="keyword">new</span> InternalError(<span class="string">"I/O exception saving generated file: "</span> + var4);</div><div class="line">                   &#125;</div><div class="line">               &#125;</div><div class="line">           &#125;);</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       <span class="keyword">return</span> var3;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>由源码得知，根据参数saveGeneratedFiles值来决定是否把生成的代理类保存到本地  继续跟跟踪源码</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> saveGeneratedFiles = ((Boolean)AccessController.doPrivileged(<span class="keyword">new</span> GetBooleanAction(<span class="string">"sun.misc.ProxyGenerator.saveGeneratedFiles"</span>))).booleanValue();</div></pre></td></tr></table></figure>
<p>GetBooleanAction实际上是调用Boolean.getBoolean(propName)来获得的，而Boolean.getBoolean(propName)调用了System.getProperty(name)，所以我们可以设置sun.misc.ProxyGenerator.saveGeneratedFiles这个系统属性为true来把生成的class保存到本地文件来查看。</p>
<h2 id="重新执行测试类"><a href="#重新执行测试类" class="headerlink" title="重新执行测试类"></a>重新执行测试类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span> lilixin</span></div><div class="line"><span class="comment"> * <span class="doctag">@description</span> 测试类</span></div><div class="line"><span class="comment"> * <span class="doctag">@create</span> 2017-08-29 4:38 PM</span></div><div class="line"><span class="comment"> **/</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicProxyTest</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="comment">//设置属性值为true 这样就可以把生成的代理类保存到本地</span></div><div class="line">        System.getProperties().put(<span class="string">"sun.misc.ProxyGenerator.saveGeneratedFiles"</span>, <span class="string">"true"</span>);</div><div class="line"></div><div class="line">        <span class="comment">//创建InvocationHandler</span></div><div class="line">        MyProxyInvocationHandler invocationHandler = <span class="keyword">new</span> MyProxyInvocationHandler(<span class="keyword">new</span> MyHelloWorld());</div><div class="line">        HelloWorld world = (HelloWorld)Proxy.newProxyInstance(DynamicProxyTest.class.getClassLoader(), <span class="keyword">new</span> Class[]&#123;HelloWorld.class&#125;, invocationHandler);</div><div class="line">        world.sayHello(<span class="string">"LiLiXin"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="生成的代理类源码"><a href="#生成的代理类源码" class="headerlink" title="生成的代理类源码"></a>生成的代理类源码</h2><p>运行测试类 在目录com/sun/proxy下面可找到$Proxy0.class类，对其进行反编译</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</div><div class="line"><span class="keyword">import</span> java.lang.reflect.Method;</div><div class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</div><div class="line"><span class="keyword">import</span> java.lang.reflect.UndeclaredThrowableException;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> $<span class="title">Proxy0</span></span></div><div class="line"><span class="class">  <span class="keyword">extends</span> <span class="title">Proxy</span></span></div><div class="line"><span class="class">  <span class="keyword">implements</span> <span class="title">HelloWorld</span></span></div><div class="line"><span class="class"></span>&#123;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">static</span> Method m1;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">static</span> Method m3;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">static</span> Method m0;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">static</span> Method m2;</div><div class="line">  </div><div class="line">  <span class="keyword">public</span> $Proxy0(InvocationHandler paramInvocationHandler)</div><div class="line">  &#123;</div><div class="line">    <span class="keyword">super</span>(paramInvocationHandler);</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object paramObject)</span></span></div><div class="line"><span class="function">  </span>&#123;</div><div class="line">    <span class="keyword">try</span></div><div class="line">    &#123;</div><div class="line">      <span class="keyword">return</span> ((Boolean)<span class="keyword">this</span>.h.invoke(<span class="keyword">this</span>, m1, <span class="keyword">new</span> Object[] &#123; paramObject &#125;)).booleanValue();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">catch</span> (Error|RuntimeException localError)</div><div class="line">    &#123;</div><div class="line">      <span class="keyword">throw</span> localError;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">catch</span> (Throwable localThrowable)</div><div class="line">    &#123;</div><div class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> UndeclaredThrowableException(localThrowable);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">(String paramString)</span></span></div><div class="line"><span class="function">  </span>&#123;</div><div class="line">    <span class="keyword">try</span></div><div class="line">    &#123;</div><div class="line">      <span class="keyword">this</span>.h.invoke(<span class="keyword">this</span>, m3, <span class="keyword">new</span> Object[] &#123; paramString &#125;);</div><div class="line">      <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">catch</span> (Error|RuntimeException localError)</div><div class="line">    &#123;</div><div class="line">      <span class="keyword">throw</span> localError;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">catch</span> (Throwable localThrowable)</div><div class="line">    &#123;</div><div class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> UndeclaredThrowableException(localThrowable);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span></span></div><div class="line"><span class="function">  </span>&#123;</div><div class="line">    <span class="keyword">try</span></div><div class="line">    &#123;</div><div class="line">      <span class="keyword">return</span> ((Integer)<span class="keyword">this</span>.h.invoke(<span class="keyword">this</span>, m0, <span class="keyword">null</span>)).intValue();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">catch</span> (Error|RuntimeException localError)</div><div class="line">    &#123;</div><div class="line">      <span class="keyword">throw</span> localError;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">catch</span> (Throwable localThrowable)</div><div class="line">    &#123;</div><div class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> UndeclaredThrowableException(localThrowable);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">toString</span><span class="params">()</span></span></div><div class="line"><span class="function">  </span>&#123;</div><div class="line">    <span class="keyword">try</span></div><div class="line">    &#123;</div><div class="line">      <span class="keyword">return</span> (String)<span class="keyword">this</span>.h.invoke(<span class="keyword">this</span>, m2, <span class="keyword">null</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">catch</span> (Error|RuntimeException localError)</div><div class="line">    &#123;</div><div class="line">      <span class="keyword">throw</span> localError;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">catch</span> (Throwable localThrowable)</div><div class="line">    &#123;</div><div class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> UndeclaredThrowableException(localThrowable);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="keyword">static</span></div><div class="line">  &#123;</div><div class="line">    <span class="keyword">try</span></div><div class="line">    &#123;</div><div class="line">      m1 = Class.forName(<span class="string">"java.lang.Object"</span>).getMethod(<span class="string">"equals"</span>, <span class="keyword">new</span> Class[] &#123; Class.forName(<span class="string">"java.lang.Object"</span>) &#125;);</div><div class="line">      m3 = Class.forName(<span class="string">"top.lilixin.user.controller.HelloWorld"</span>).getMethod(<span class="string">"sayHello"</span>, <span class="keyword">new</span> Class[] &#123; Class.forName(<span class="string">"java.lang.String"</span>) &#125;);</div><div class="line">      m0 = Class.forName(<span class="string">"java.lang.Object"</span>).getMethod(<span class="string">"hashCode"</span>, <span class="keyword">new</span> Class[<span class="number">0</span>]);</div><div class="line">      m2 = Class.forName(<span class="string">"java.lang.Object"</span>).getMethod(<span class="string">"toString"</span>, <span class="keyword">new</span> Class[<span class="number">0</span>]);</div><div class="line">      <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">catch</span> (NoSuchMethodException localNoSuchMethodException)</div><div class="line">    &#123;</div><div class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchMethodError(localNoSuchMethodException.getMessage());</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">catch</span> (ClassNotFoundException localClassNotFoundException)</div><div class="line">    &#123;</div><div class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> NoClassDefFoundError(localClassNotFoundException.getMessage());</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>从源码中可以看到，动态生成的代理类有如下特性：</p>
<ul>
<li>代理类继承了Proxy类，实现了代理的HelloWorld接口，由于java不能多继承，这里已经继承了Proxy类了，不能再继承其他的类，所以JDK的动态代理不支持对实现类的代理，只支持接口的代理。</li>
<li>提供了一个使用InvocationHandler作为参数的构造方法。</li>
<li>代理类实现代理接口的sayHello方法中，只是简单的调用了InvocationHandler的invoke方法，我们可以在invoke方法中进行一些特殊操作，甚至不调用实现的方法，直接返回。</li>
</ul>
<h2 id="spring-AOP"><a href="#spring-AOP" class="headerlink" title="spring AOP"></a>spring AOP</h2><p>从上面的源码分析中我们可以大致了解到spring aop的各种拦截如何实现，很明显 无非就是在method.invoke方法调用前后做文章 代码如下</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;  </div><div class="line">    <span class="comment">// BeforeAdvice  </span></div><div class="line">    Object invoke = <span class="keyword">null</span>;  </div><div class="line">    <span class="keyword">try</span> &#123;  </div><div class="line">        <span class="comment">// AroundAdvice  </span></div><div class="line">        invoke = method.invoke(target, args);  </div><div class="line">        <span class="comment">// AroundAdvice  </span></div><div class="line">        <span class="comment">// AfterReturningAdvice  </span></div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">catch</span> (Throwable e) &#123;  </div><div class="line">        <span class="comment">// AfterThrowingAdvice  </span></div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">finally</span> &#123;  </div><div class="line">        <span class="comment">// AfterAdvice  </span></div><div class="line">    &#125;  </div><div class="line">    <span class="keyword">return</span> invoke;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol>
<li>底层最终是由sun.misc包中ProxyGenerator类的generateProxyClass()方法生成的代理类</li>
<li>通过Proxy.newProxyInstance()生成代理类的实例对象，创建对象时传入InvocationHandler类型的实例。</li>
<li>调用新实例的方法 world.sayHello(“name”);即调用传入的InvocationHandler类中的invoke()方法。</li>
</ol>
<blockquote>
<p>本文融合多篇文章整理而成，具体文章连接已遗失，如有侵权请告知</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> ittech </category>
            
        </categories>
        
        
    </entry>
    
    <entry>
      <title><![CDATA[计模式系列之抽象工厂模式]]></title>
      <url>/2017/08/29/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97%E4%B9%8B%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>工厂方法模式有一个问题就是，类的创建依赖工厂类，也就是说，如果想要拓展程序，必须对工厂类进行修改，这违背了闭包原则，所以需要抽象工厂模式</p>
<h1 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h1><h2 id="定义接口"><a href="#定义接口" class="headerlink" title="定义接口"></a>定义接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Sender</span> </span>&#123;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Send</span><span class="params">()</span></span>;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="两个实现类"><a href="#两个实现类" class="headerlink" title="两个实现类"></a>两个实现类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MailSender</span> <span class="keyword">implements</span> <span class="title">Sender</span> </span>&#123;  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Send</span><span class="params">()</span> </span>&#123;  </div><div class="line">        System.out.println(<span class="string">"this is mailsender!"</span>);  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SmsSender</span> <span class="keyword">implements</span> <span class="title">Sender</span> </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Send</span><span class="params">()</span> </span>&#123;  </div><div class="line">        System.out.println(<span class="string">"this is sms sender!"</span>);  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="工厂接口"><a href="#工厂接口" class="headerlink" title="工厂接口"></a>工厂接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Provider</span> </span>&#123;  </div><div class="line">    <span class="function"><span class="keyword">public</span> Sender <span class="title">produce</span><span class="params">()</span></span>;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="两个工厂类"><a href="#两个工厂类" class="headerlink" title="两个工厂类"></a>两个工厂类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SendMailFactory</span> <span class="keyword">implements</span> <span class="title">Provider</span> </span>&#123;  </div><div class="line">      </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> Sender <span class="title">produce</span><span class="params">()</span></span>&#123;  </div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MailSender();  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SendSmsFactory</span> <span class="keyword">implements</span> <span class="title">Provider</span></span>&#123;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> Sender <span class="title">produce</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SmsSender();  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </div><div class="line">        Provider provider = <span class="keyword">new</span> SendMailFactory();  </div><div class="line">        Sender sender = provider.produce();  </div><div class="line">        sender.Send();  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>其实这个模式的好处就是，如果你现在想增加一个功能：发及时信息，则只需做一个实现类，实现Sender接口，同时做一个工厂类，实现Provider接口，无需去改动现成的代码。这样做，拓展性较好！</p>
<p>个人觉得抽象工厂模式大比较大型的项目中使用更合适，小型项目使用会觉得比较繁琐！</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[设计模式系列之工厂方法模式]]></title>
      <url>/2017/08/29/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%B3%BB%E5%88%97%E4%B9%8B%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>工厂方法模式分为三种</p>
<ul>
<li>简单工厂方法模式</li>
<li>多工厂方法模式 </li>
<li>静态工厂方法模式</li>
</ul>
<h1 id="简单工厂方法模式"><a href="#简单工厂方法模式" class="headerlink" title="简单工厂方法模式"></a>简单工厂方法模式</h1><h2 id="创建共同接口"><a href="#创建共同接口" class="headerlink" title="创建共同接口"></a>创建共同接口</h2><blockquote>
<p>以发短信和发邮件为例</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Sender</span> </span>&#123;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Send</span><span class="params">()</span></span>;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="创建实现类"><a href="#创建实现类" class="headerlink" title="创建实现类"></a>创建实现类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MailSender</span> <span class="keyword">implements</span> <span class="title">Sender</span> </span>&#123;  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Send</span><span class="params">()</span> </span>&#123;  </div><div class="line">        System.out.println(<span class="string">"this is mailsender!"</span>);  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SmsSender</span> <span class="keyword">implements</span> <span class="title">Sender</span> </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Send</span><span class="params">()</span> </span>&#123;  </div><div class="line">        System.out.println(<span class="string">"this is sms sender!"</span>);  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="建工厂类"><a href="#建工厂类" class="headerlink" title="建工厂类"></a>建工厂类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SendFactory</span> </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> Sender <span class="title">produce</span><span class="params">(String type)</span> </span>&#123;  </div><div class="line">        <span class="keyword">if</span> (<span class="string">"mail"</span>.equals(type)) &#123;  </div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> MailSender();  </div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"sms"</span>.equals(type)) &#123;  </div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> SmsSender();  </div><div class="line">        &#125; <span class="keyword">else</span> &#123;  </div><div class="line">            System.out.println(<span class="string">"请输入正确的类型!"</span>);  </div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FactoryTest</span> </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </div><div class="line">        SendFactory factory = <span class="keyword">new</span> SendFactory();  </div><div class="line">        Sender sender = factory.produce(<span class="string">"sms"</span>);  </div><div class="line">        sender.Send();  </div><div class="line">    &#125;  </div><div class="line">&#125;  </div><div class="line">～ 输出 <span class="keyword">this</span> is sms sender!</div></pre></td></tr></table></figure>
<blockquote>
<p>简单工厂违背了开闭原则，每次添加一个类都要修改工厂类，并且如果传递的字符串出错，则不能正确创建对象</p>
</blockquote>
<h1 id="多工厂方法模式"><a href="#多工厂方法模式" class="headerlink" title="多工厂方法模式"></a>多工厂方法模式</h1><blockquote>
<p>工厂方法模式是提供多个工厂方法，分别创建对象。</p>
</blockquote>
<h2 id="工厂类"><a href="#工厂类" class="headerlink" title="工厂类"></a>工厂类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SendFactory</span> </span>&#123;  </div><div class="line">      </div><div class="line">    <span class="function"><span class="keyword">public</span> Sender <span class="title">produceMail</span><span class="params">()</span></span>&#123;  </div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MailSender();  </div><div class="line">    &#125;  </div><div class="line">      </div><div class="line">    <span class="function"><span class="keyword">public</span> Sender <span class="title">produceSms</span><span class="params">()</span></span>&#123;  </div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SmsSender();  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FactoryTest</span> </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </div><div class="line">        SendFactory factory = <span class="keyword">new</span> SendFactory();  </div><div class="line">        Sender sender = factory.produceMail();  </div><div class="line">        sender.Send();  </div><div class="line">    &#125;  </div><div class="line">&#125;  </div><div class="line">~ 输出 <span class="keyword">this</span> is mailsender!</div></pre></td></tr></table></figure>
<blockquote>
<p>工厂方法模式使用时每次都new一个工厂类，不是很方便，所以大多数情况我们都是用静态工厂模式</p>
</blockquote>
<h1 id="静态工厂方法模式"><a href="#静态工厂方法模式" class="headerlink" title="静态工厂方法模式"></a>静态工厂方法模式</h1><blockquote>
<p>将工厂方法模式中的方法都变为static 静态的既可直接调用，不需要创建实例</p>
</blockquote>
<h2 id="工厂类-1"><a href="#工厂类-1" class="headerlink" title="工厂类"></a>工厂类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SendFactory</span> </span>&#123;  </div><div class="line">      </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Sender <span class="title">produceMail</span><span class="params">()</span></span>&#123;  </div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MailSender();  </div><div class="line">    &#125;  </div><div class="line">      </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Sender <span class="title">produceSms</span><span class="params">()</span></span>&#123;  </div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SmsSender();  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="测试-2"><a href="#测试-2" class="headerlink" title="测试"></a>测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FactoryTest</span> </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;      </div><div class="line">        Sender sender = SendFactory.produceMail();  </div><div class="line">        sender.Send();  </div><div class="line">    &#125;  </div><div class="line">&#125;  </div><div class="line">~ 输出：<span class="keyword">this</span> is mailsender!</div></pre></td></tr></table></figure>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>工厂方法模式适合：凡是出现了大量的产品需要创建，并且具有共同的接口时，可以通过工厂方法模式进行创建。大多数情况下我们都会选择使用静态工厂方法模式</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[使用xxl-job搭建可视化任务管理平台]]></title>
      <url>/2017/08/28/%E4%BD%BF%E7%94%A8xxl-job%E6%90%AD%E5%BB%BA%E5%8F%AF%E8%A7%86%E5%8C%96%E4%BB%BB%E5%8A%A1%E7%AE%A1%E7%90%86%E5%B9%B3%E5%8F%B0/</url>
      <content type="html"><![CDATA[<p>《转载-分布式任务调度平台XXL-JOB》</p>
<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>XXL-JOB是一个轻量级分布式任务调度框架，其核心设计目标是开发迅速、学习简单、轻量级、易扩展。现已开放源代码并接入多家公司线上产品线，开箱即用。</p>
<h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ul>
<li>简单：支持通过Web页面对任务进行CRUD操作，操作简单，一分钟上手；</li>
<li>动态：支持动态修改任务状态、暂停/恢复任务，以及终止运行中任务，即时生效；</li>
<li>调度中心HA（中心式）：调度采用中心式设计，“调度中心”基于集群Quartz实现，可保证调度中心HA；</li>
<li>执行器HA（分布式）：任务分布式执行，任务”执行器”支持集群部署，可保证任务执行HA；</li>
<li>任务Failover：执行器集群部署时，任务路由策略选择”故障转移”情况下调度失败时将会平滑切换执行器进行Failover；</li>
<li>一致性：“调度中心”通过DB锁保证集群分布式调度的一致性, 一次任务调度只会触发一次执行；</li>
<li>自定义任务参数：支持在线配置调度任务入参，即时生效；</li>
<li>调度线程池：调度系统多线程触发调度运行，确保调度精确执行，不被堵塞；</li>
<li>弹性扩容缩容：一旦有新执行器机器上线或者下线，下次调度时将会重新分配任务；</li>
<li>邮件报警：任务失败时支持邮件报警，支持配置多邮件地址群发报警邮件；</li>
<li>状态监控：支持实时监控任务进度；</li>
<li>Rolling执行日志：支持在线查看调度结果，并且支持以Rolling方式实时查看执行器输出的完整的执行日志；</li>
<li>GLUE：提供Web IDE，支持在线开发任务逻辑代码，动态发布，实时编译生效，省略部署上线的过程。支持30个版本的历史版本回溯。</li>
<li>数据加密：调度中心和执行器之间的通讯进行数据加密，提升调度信息安全性；</li>
<li>任务依赖：支持配置子任务依赖，当父任务执行结束且执行成功后将会主动触发一次子任务的执行, 多个子任务用逗号分隔；</li>
<li>推送maven中央仓库: 将会把最新稳定版推送到maven中央仓库, 方便用户接入和使用;</li>
<li>任务注册: 执行器会周期性自动注册任务, 调度中心将会自动发现注册的任务并触发执行。同时，也支持手动录入执行器地址；</li>
<li>路由策略：执行器集群部署时提供丰富的路由策略，包括：第一个、最后一个、轮询、随机、一致性HASH、最不经常使用、最近最久未使用、故障转移；</li>
<li>运行报表：支持实时查看运行数据，如任务数量、调度次数、执行器数量等；以及调度报表，如调度日期分布图，调度成功分布图等；</li>
<li>脚本任务：支持以GLUE模式开发和运行脚本任务，包括Shell、Python等类型脚本;</li>
<li>阻塞处理策略：调度过于密集执行器来不及处理时的处理策略，策略包括：单机串行（默认）、丢弃后续调度、覆盖之前调度；</li>
<li>失败处理策略；调度失败时的处理策略，策略包括：失败告警（默认）、失败重试；</li>
</ul>
<h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p><a href="https://github.com/xuxueli/xxl-job/releases" target="_blank" rel="external">https://github.com/xuxueli/xxl-job/releases</a></p>
<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>JDK：1.7+<br>Servlet/JSP Spec：3.1/2.3<br>Tomcat：8.5.x/Jetty9.2<br>Spring-boot：1.3.8/Spring4.x<br>Mysql：5.6+<br>Maven：3+    </p>
<h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><h3 id="初始化“调度数据库”"><a href="#初始化“调度数据库”" class="headerlink" title="初始化“调度数据库”"></a>初始化“调度数据库”</h3><p>请下载项目源码并解压，获取 “调度数据库初始化SQL脚本”(脚本文件为: 源码解压根目录\xxl-job\db\tables_xxl_job.sql) 并执行即可。正常情况下,应该生成16张表;</p>
<p>调度中心支持集群部署，集群情况下各节点务必连接同一个mysql实例;</p>
<p>如果mysql做主从,调度中心集群节点务必强制走主库;</p>
<h3 id="编译源码"><a href="#编译源码" class="headerlink" title="编译源码"></a>编译源码</h3><p><img src="http://ou1kontjz.bkt.clouddn.com/48bcea90b42d00216c8dee414ae5a665.jpg" alt=""></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">xxl-job-admin：调度中心</div><div class="line">xxl-job-core：公共依赖</div><div class="line">xxl-job-executor-example：执行器Example（可直接使用执行器Example，也可以将现有项目改造成执行器使用）</div><div class="line">xxl-job-executor-springboot-example：执行器Example，springboot版本</div></pre></td></tr></table></figure>
<h3 id="配置部署“调度中心”"><a href="#配置部署“调度中心”" class="headerlink" title="配置部署“调度中心”"></a>配置部署“调度中心”</h3><blockquote>
<p>调度中心项目：xxl-job-admin<br>作用：统一管理任务调度平台上调度任务，负责触发调度执行。</p>
</blockquote>
<h4 id="调度中心配置"><a href="#调度中心配置" class="headerlink" title="调度中心配置"></a>调度中心配置</h4><p><img src="http://ou1kontjz.bkt.clouddn.com/2ed6665e7adf6aa2c26e4126bef2eb80.jpg" alt=""></p>
<h4 id="部署项目"><a href="#部署项目" class="headerlink" title="部署项目"></a>部署项目</h4><p>如果已经正确进行上述配置，可将项目编译打war包并部署到tomcat中。<br>访问链接：<a href="http://localhost:8080/xxl-job-admin/" target="_blank" rel="external">http://localhost:8080/xxl-job-admin/</a> ，登录后运行界面如下图所示<br><img src="http://ou1kontjz.bkt.clouddn.com/7dd8ea93f69aee8848a6dfcf20a8142b.jpg" alt=""></p>
<h3 id="配置部署“执行器项目”"><a href="#配置部署“执行器项目”" class="headerlink" title="配置部署“执行器项目”"></a>配置部署“执行器项目”</h3><blockquote>
<p>“执行器”项目：xxl-job-executor-example (如新建执行器项目，可参考该Example执行器项目的配置步骤；)<br>作用：负责接收“调度中心”的调度并执行；</p>
</blockquote>
<h4 id="maven依赖"><a href="#maven依赖" class="headerlink" title="maven依赖"></a>maven依赖</h4><p>确认pom文件中引入了 “xxl-job-core” 的maven依赖；</p>
<h4 id="执行器配置"><a href="#执行器配置" class="headerlink" title="执行器配置"></a>执行器配置</h4><p><img src="http://ou1kontjz.bkt.clouddn.com/b3107b11267625ffb795c99a2007f404.jpg" alt=""></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">### xxl-job admin address list：调度中心部署跟地址：如调度中心集群部署存在多个地址则用逗号分隔。执行器将会使用该地址进行&quot;执行器心跳注册&quot;和&quot;任务结果回调&quot;。</div><div class="line">xxl.job.admin.addresses=http://127.0.0.1:8080/xxl-job-admin</div><div class="line"></div><div class="line">### xxl-job executor address：执行器&quot;AppName&quot;和地址信息配置：AppName执行器心跳注册分组依据；地址信息用于&quot;调度中心请求并触发任务&quot;和&quot;执行器注册&quot;。执行器默认端口为9999，执行器IP默认为空表示自动获取IP，多网卡时可手动设置指定IP。单机部署多个执行器时，注意要配置不同执行器端口；</div><div class="line">xxl.job.executor.appname=xxl-job-executor-example</div><div class="line">xxl.job.executor.ip=</div><div class="line">xxl.job.executor.port=9999</div><div class="line"></div><div class="line">### xxl-job log path：执行器运行日志文件存储的磁盘位置</div><div class="line">xxl.job.executor.logpath=/data/applogs/xxl-job/jobhandler/</div></pre></td></tr></table></figure>
<h4 id="执行器组件配置"><a href="#执行器组件配置" class="headerlink" title="执行器组件配置"></a>执行器组件配置</h4><p><img src="http://ou1kontjz.bkt.clouddn.com/29fe633bccca75cee65bc40ed5fba3e1.jpg" alt=""></p>
<blockquote>
<p>1、JobHandler 扫描路径：自动扫描容器中JobHandler；<br>2、执行器Excutor配置：执行器核心配置；</p>
</blockquote>
<h4 id="部署项目-1"><a href="#部署项目-1" class="headerlink" title="部署项目"></a>部署项目</h4><ul>
<li>xxl-job-executor-example：项目编译打包成WAR包，并部署到tomcat中。</li>
<li>xxl-job-executor-springboot-example：项目编译打包成springboot类型的可执行JAR包，命令启动即可；</li>
</ul>
<h3 id="开发第一个任务"><a href="#开发第一个任务" class="headerlink" title="开发第一个任务"></a>开发第一个任务</h3><h4 id="开发JobHandler"><a href="#开发JobHandler" class="headerlink" title="开发JobHandler"></a>开发JobHandler</h4><ul>
<li>1、 新建一个继承com.xxl.job.core.handler.IJobHandler的Java类；</li>
<li>2、 该类被Spring容器扫描为Bean实例，如加“@Service注解”；</li>
<li><p>3、 添加 “@JobHander(value=”自定义jobhandler名称”)”注解，注解的value值为自定义的JobHandler名称，该名称对应的是调度中心新建任务的JobHandler属性的值。</p>
<p><img src="http://ou1kontjz.bkt.clouddn.com/ef9ac560de2fd27563e10f28cef93b83.jpg" alt=""></p>
</li>
</ul>
<h4 id="新建任务"><a href="#新建任务" class="headerlink" title="新建任务"></a>新建任务</h4><p><img src="http://ou1kontjz.bkt.clouddn.com/a5785bc66a476042ac355123c066e989.jpg" alt=""></p>
<p><img src="http://ou1kontjz.bkt.clouddn.com/b21c23f33271931a30260776c1bdac8f.jpg" alt=""></p>
<h4 id="配置属性详细说明"><a href="#配置属性详细说明" class="headerlink" title="配置属性详细说明"></a>配置属性详细说明</h4><ul>
<li>执行器：任务的绑定的执行器，任务触发调度时将会自动发现注册成功的执行器, 实现任务自动发现功能; 另一方面也可以方便的进行任务分组。每个任务必须绑定一个执行器, 可在 “执行器管理” 进行设置;</li>
<li>描述：任务的描述信息，便于任务管理；</li>
<li>路由策略：当执行器集群部署时，执行器路由规则；<br>  FIRST（第一个）：固定选择第一个执行器；<br>  LAST（最后一个）：固定选择最后一个执行器；<br>  ROUND（轮询）：；<br>  RANDOM（随机）：随机选择在线的执行器；<br>  CONSISTENT_HASH（一致性HASH）：分组下机器地址相同，不同JOB均匀散列在不同机器上，保证分组下机器分配JOB平均；且每个JOB固定调度其中一台机器；<br>  LEAST_FREQUENTLY_USED（最不经常使用）：单个JOB对应的每个执行器，使用频率最低的优先被选举；<br>  LEAST_RECENTLY_USED（最近最久未使用）：单个JOB对应的每个执行器，最久为使用的优先被选举；<br>  FAILOVER（故障转移）：按照顺序依次进行心跳检测，第一个心跳检测成功的机器选定为目标执行器并发起调度；<br>  BUSYOVER（忙碌转移）：按照顺序依次进行空闲检测，第一个空闲检测成功的机器选定为目标执行器并发起调度；</li>
<li>Cron：触发任务执行的Cron表达式；</li>
<li>运行模式：<br>  BEAN模式：任务以JobHandler方式维护在执行器端；需要结合 “JobHandler” 属性匹配执行器中任务；<br>  GLUE模式(Java)：任务以源码方式维护在调度中心；该模式的任务实际上是一段继承自IJobHandler的Java类代码并 “groovy” 源码方式维护，它在执行器项目中运行，可使用@Resource/@Autowire注入执行器里中的其他服务；<br>  GLUE模式(Shell)：任务以源码方式维护在调度中心；该模式的任务实际上是一段 “shell” 脚本；<br>  GLUE模式(Python)：任务以源码方式维护在调度中心；该模式的任务实际上是一段 “python” 脚本；</li>
<li>JobHandler：运行模式为 “BEAN模式” 时生效，对应执行器中新开发的JobHandler类“@JobHander”注解自定义的value值；</li>
<li>子任务Key：每个任务都拥有一个唯一的任务Key(任务Key可以从任务列表获取)，当本任务执行结束并且执行成功时，将会触发子任务Key所对应的任务的一次主动调度。</li>
<li>阻塞处理策略：调度过于密集执行器来不及处理时的处理策略；<br>  单机串行（默认）：调度请求进入单机执行器后，调度请求进入FIFO队列并以串行方式运行；<br>  丢弃后续调度：调度请求进入单机执行器后，发现执行器存在运行的调度任务，本次请求将会被丢弃并标记为失败；<br>  覆盖之前调度：调度请求进入单机执行器后，发现执行器存在运行的调度任务，将会终止运行中的调度任务并清空队列，然后运行本地调度任务；</li>
<li>失败处理策略；调度失败时的处理策略；<br>  失败告警（默认）：调度失败时，将会触发失败报警，如发送报警邮件；<br>  失败重试：调度失败时，将会主动进行一次失败重试调度，重试调度后仍然失败将会触发一失败告警。注意当任务以failover方式路由时，每次失败重试将会触发新一轮路由。</li>
<li>执行参数：任务执行所需的参数，多个参数时用逗号分隔，任务执行时将会把多个参数抓换成数组传入；</li>
<li>报警邮件：任务调度失败时邮件通知的邮箱地址，支持配置多邮箱地址，配置多个邮箱地址时用逗号分隔；</li>
<li>负责人：任务的负责人；</li>
</ul>
<h2 id="架构图"><a href="#架构图" class="headerlink" title="架构图"></a>架构图</h2><p><img src="http://ou1kontjz.bkt.clouddn.com/7af3aea45573a2cec87ce6d96a3d5e10.jpg" alt=""></p>
<h2 id="通讯模块剖析"><a href="#通讯模块剖析" class="headerlink" title="通讯模块剖析"></a>通讯模块剖析</h2><ul>
<li>1、“调度中心”向“执行器”发送http调度请求: “执行器”中接收请求的服务，实际上是一台内嵌jetty服务器，默认端口9999;</li>
<li>2、“执行器”执行任务逻辑；</li>
<li>3、“执行器”http回调“调度中心”调度结果: “调度中心”中接收回调的服务，是针对执行器开放一套API服务;</li>
</ul>
<p>本文转载自简书：<a href="http://www.jianshu.com/p/4c2ffb78ebe7" target="_blank" rel="external">http://www.jianshu.com/p/4c2ffb78ebe7</a></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[CAS单点登录使用]]></title>
      <url>/2017/08/23/CAS%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<h1 id="CAS简介"><a href="#CAS简介" class="headerlink" title="CAS简介"></a>CAS简介</h1><h1 id="CAS架构图"><a href="#CAS架构图" class="headerlink" title="CAS架构图"></a>CAS架构图</h1><p><img src="http://ou1kontjz.bkt.clouddn.com/1a090a9a593dce54486e4e83c838ba98.jpg" alt=""></p>
<blockquote>
<p>CAS server 和CAS client 是构成CAS系统架构的两个物理组件，他们之间通过多种协议来通信 </p>
</blockquote>
<h2 id="CAS-server"><a href="#CAS-server" class="headerlink" title="CAS server"></a>CAS server</h2><p>CAS server 的主要作用是通过分发ticket并使之生效来对用户进行认证并授权用户访问CAS认可的服务，通常这些服务就是指CAS client，当用户成功登录 server发放一个已授权的ticket 给用户（TGT），此时一个sso session就被创建了。</p>
<h2 id="CAS-client"><a href="#CAS-client" class="headerlink" title="CAS client"></a>CAS client</h2><p>通常CAS client有两层含义，一，CAS client 可以是任何被CAS认可的应用，二 ，CAS client也可以是能与各种软件平台或者应用集成的软件包</p>
<h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><p>到官网下载CAS源码 <a href="https://www.apereo.org/projects/cas/download-cas" target="_blank" rel="external">https://www.apereo.org/projects/cas/download-cas</a><br>本文使用v3.5.2版本 现在比较新的版本需要自己用gradle打包</p>
<p>下载tomcat  本文使用tomcat8版本</p>
<p>jdk使用1.8版本</p>
<h1 id="部署-CAS-Server"><a href="#部署-CAS-Server" class="headerlink" title="部署 CAS Server"></a>部署 CAS Server</h1><h2 id="配置Tomcat使用Https协议"><a href="#配置Tomcat使用Https协议" class="headerlink" title="配置Tomcat使用Https协议"></a>配置Tomcat使用Https协议</h2><h3 id="创建证书"><a href="#创建证书" class="headerlink" title="创建证书"></a>创建证书</h3><p>证书是单点登录认证系统中很重要的一把钥匙，客户端于服务器的交互安全靠的就是证书；本文使用jdk自带的keytool生成，真正在产品环境中使用肯定要去证书提供商去购买，证书认证一般都是由VeriSign认证，中文官方网站：<a href="http://www.verisign.com/cn/" target="_blank" rel="external">http://www.verisign.com/cn/</a></p>
<pre><code>$ keytool -genkey -alias jason -keyalg RSA -keystore /Users/lilixin/programming/jasonssokey    
</code></pre><p><img src="http://ou1kontjz.bkt.clouddn.com/8f680627ff96f5c635f360a3c5f57abe.jpg" alt=""></p>
<h3 id="添加hosts"><a href="#添加hosts" class="headerlink" title="添加hosts"></a>添加hosts</h3><p>在/etc/hosts(linux系统)中加入127.0.0.1  sso.jason-li.cn</p>
<h3 id="导出证书"><a href="#导出证书" class="headerlink" title="导出证书"></a>导出证书</h3><pre><code>keytool -export -file /Users/lilixin/programming/jasonssokey.crt -alias jason -keystore /Users/lilixin/programming/jasonssokey
</code></pre><p>至此导出证书完成，可以分发给应用的JDK使用了，接下来讲解客户端的JVM怎么导入证书</p>
<h3 id="为客户端JVM导入证书"><a href="#为客户端JVM导入证书" class="headerlink" title="为客户端JVM导入证书"></a>为客户端JVM导入证书</h3><pre><code>keytool -import -keystore /Library/Java/JavaVirtualMachines/jdk1.7.0_80.jdk/Contents/Home/jre/lib/security/cacerts -file /Users/lilixin/programming/jasonssokey  -alias jason
</code></pre><p>过程中可能遇到如下错误，请重命名/…./security/cacerts</p>
<pre><code>keytool 错误: java.io.IOException: Keystore was tampered with, or password was incorrect
</code></pre><h3 id="应用证书到Web服务器"><a href="#应用证书到Web服务器" class="headerlink" title="应用证书到Web服务器"></a>应用证书到Web服务器</h3><p>启用Web服务器(Tomcat)的SSL，也就是HTTPS加密协议<br>打开tomcat目录的conf/server.xml文件，开启83和87行的注释代码，并设置keystoreFile、keystorePass,修改后结果如下，请注意属性值区分大小写</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">Connector</span></span></div><div class="line"><span class="tag">        <span class="attr">port</span>=<span class="string">"8443"</span></span></div><div class="line"><span class="tag">        <span class="attr">protocol</span>=<span class="string">"org.apache.coyote.http11.Http11Protocol"</span></span></div><div class="line"><span class="tag">        <span class="attr">SSLEnabled</span>=<span class="string">"true"</span></span></div><div class="line"><span class="tag">        <span class="attr">maxThreads</span>=<span class="string">"150"</span></span></div><div class="line"><span class="tag">        <span class="attr">scheme</span>=<span class="string">"https"</span></span></div><div class="line"><span class="tag">        <span class="attr">secure</span>=<span class="string">"true"</span></span></div><div class="line"><span class="tag">        <span class="attr">clientAuth</span>=<span class="string">"false"</span></span></div><div class="line"><span class="tag">        <span class="attr">sslProtocol</span>=<span class="string">"TLS"</span></span></div><div class="line"><span class="tag">        <span class="attr">keystoreFile</span>=<span class="string">"/Users/lilixin/programming/jasonssokey"</span></span></div><div class="line"><span class="tag">        <span class="attr">keystorePass</span>=<span class="string">"adwars"</span></span></div><div class="line"><span class="tag">    /&gt;</span></div></pre></td></tr></table></figure>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>浏览器打开 <a href="https://sso.jason-li.cn:8443/" target="_blank" rel="external">https://sso.jason-li.cn:8443/</a> 可访问到tomcat页面既成功</p>
<h2 id="启动CAS-server"><a href="#启动CAS-server" class="headerlink" title="启动CAS server"></a>启动CAS server</h2><p>把下栽来的CAS源码中 modules目录中的cas-server-webapp-3.5.2.war 重命名后放入tomcat的webapps目录中 启动tomcat<br>访问<a href="https://sso.jason-li.cn:8443/cas" target="_blank" rel="external">https://sso.jason-li.cn:8443/cas</a> 如果出现正常CAS登录页面则部署成功</p>
<h1 id="扩展认证接口"><a href="#扩展认证接口" class="headerlink" title="扩展认证接口"></a>扩展认证接口</h1><p>由于缺省的实现仅能用于测试，我们还需要自己扩展认证接口</p>
<h2 id="扩展-AuthenticationHandler"><a href="#扩展-AuthenticationHandler" class="headerlink" title="扩展 AuthenticationHandler"></a>扩展 AuthenticationHandler</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AuthenticationHandler</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * Method to determine if the credentials supplied are valid.</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> credentials The credentials to validate.</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span> true if valid, return false otherwise.</span></div><div class="line"><span class="comment">     * <span class="doctag">@throws</span> AuthenticationException An AuthenticationException can contain</span></div><div class="line"><span class="comment">     * details about why a particular authentication request failed.</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">authenticate</span><span class="params">(Credentials credentials)</span> <span class="keyword">throws</span> AuthenticationException</span>;</div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">     * Method to check if the handler knows how to handle the credentials</span></div><div class="line"><span class="comment">     * provided. It may be a simple check of the Credentials class or something</span></div><div class="line"><span class="comment">     * more complicated such as scanning the information contained in the</span></div><div class="line"><span class="comment">     * Credentials object. </span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> credentials The credentials to check.</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span> true if the handler supports the Credentials, false othewrise.</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(Credentials credentials)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>通过源码可以看到AuthenticationHandler主要有两个方法 supports ()方法用于检查所给的包含认证信息的Credentials 是否受当前 AuthenticationHandler 支持；而 authenticate() 方法则担当验证认证信息的任务，这也是需要扩展的主要方法，根据情况与存储合法认证信息的介质进行交互，返回 boolean 类型的值，true 表示验证通过，false 表示验证失败。</p>
<h1 id="JDBC-认证方法"><a href="#JDBC-认证方法" class="headerlink" title="JDBC 认证方法"></a>JDBC 认证方法</h1><p>通常我们会将用户信息保存在数据库中，所以采用jdbc认证方式</p>
<h2 id="配置DataStore"><a href="#配置DataStore" class="headerlink" title="配置DataStore"></a>配置DataStore</h2><p>打开 /webapps/cas/WEB-INF/deployerConfigContext.xml添加一个新的 bean 标签</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span></span></div><div class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span></span></div><div class="line"><span class="tag">      <span class="attr">p:driverClass</span>=<span class="string">"com.mysql.jdbc.Driver"</span></span></div><div class="line"><span class="tag">      <span class="attr">p:jdbcUrl</span>=<span class="string">"jdbc:mysql://127.0.0.1:3306/ucenter?useUnicode=true"</span></span></div><div class="line"><span class="tag">      <span class="attr">p:user</span>=<span class="string">"root"</span></span></div><div class="line"><span class="tag">      <span class="attr">p:password</span>=<span class="string">"root"</span></span></div><div class="line"><span class="tag">      <span class="attr">p:initialPoolSize</span>=<span class="string">"1"</span></span></div><div class="line"><span class="tag">      <span class="attr">p:minPoolSize</span>=<span class="string">"1"</span></span></div><div class="line"><span class="tag">      <span class="attr">p:maxPoolSize</span>=<span class="string">"3"</span></span></div><div class="line"><span class="tag">      <span class="attr">p:maxIdleTimeExcessConnections</span>=<span class="string">"120"</span></span></div><div class="line"><span class="tag">      <span class="attr">p:checkoutTimeout</span>=<span class="string">"10000"</span></span></div><div class="line"><span class="tag">      <span class="attr">p:acquireIncrement</span>=<span class="string">"6"</span></span></div><div class="line"><span class="tag">      <span class="attr">p:acquireRetryAttempts</span>=<span class="string">"5"</span></span></div><div class="line"><span class="tag">      <span class="attr">p:acquireRetryDelay</span>=<span class="string">"2000"</span></span></div><div class="line"><span class="tag">      <span class="attr">p:idleConnectionTestPeriod</span>=<span class="string">"30"</span></span></div><div class="line"><span class="tag">      <span class="attr">p:preferredTestQuery</span>=<span class="string">"select 1"</span> /&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>记得添加名称空间 xmlns:p=”<a href="http://www.springframework.org/schema/p" target="_blank" rel="external">http://www.springframework.org/schema/p</a>“</p>
</blockquote>
<h2 id="配置-AuthenticationHandler"><a href="#配置-AuthenticationHandler" class="headerlink" title="配置 AuthenticationHandler"></a>配置 AuthenticationHandler</h2><blockquote>
<p>在 cas-server-support-jdbc-3.1.1.jar 包中，提供了 3 个基于 JDBC 的 AuthenticationHandler，分别为 BindModeSearchDatabaseAuthenticationHandler, QueryDatabaseAuthenticationHandler, SearchModeSearchDatabaseAuthenticationHandler。其中 BindModeSearchDatabaseAuthenticationHandler 是用所给的用户名和密码去建立数据库连接，根据连接建立是否成功来判断验证成功与否；QueryDatabaseAuthenticationHandler 通过配置一个 SQL 语句查出密码，与所给密码匹配；SearchModeSearchDatabaseAuthenticationHandler 通过配置存放用户验证信息的表、用户名字段和密码字段，构造查询语句来验证。</p>
</blockquote>
<p>我们这里选用QueryDatabaseAuthenticationHandler</p>
<blockquote>
<p>CAS4.2.1默认使用的是一个简单的acceptUsersAuthenticationHandler,找到他然后注释掉他</p>
</blockquote>
<p>使用我们自己定义的AuthenticationHandler</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"primaryAuthenticationHandler"</span>     </span></div><div class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">"org.jasig.cas.adaptors.jdbc.QueryDatabaseAuthenticationHandler"</span></span></div><div class="line"><span class="tag"> <span class="attr">p:dataSource-ref</span>=<span class="string">"dataSource"</span></span></div><div class="line"><span class="tag"> <span class="attr">p:passwordEncoder-ref</span>=<span class="string">"MD5PasswordEncoder"</span></span></div><div class="line"><span class="tag"> <span class="attr">p:sql</span>=<span class="string">"SELECT password FROM uc_members WHERE username=?"</span> /&gt;</span></div></pre></td></tr></table></figure>
<p>这里我们采用MD5加密 MD5PasswordEncoder是对具体实现的引用</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span>  <span class="attr">id</span>=<span class="string">"MD5PasswordEncoder"</span> <span class="attr">class</span>=<span class="string">"org.jasig.cas.authentication.handler.DefaultPasswordEncoder"</span> &gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span>  <span class="attr">value</span>=<span class="string">"MD5"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="定制返回属性"><a href="#定制返回属性" class="headerlink" title="定制返回属性"></a>定制返回属性</h2><blockquote>
<p>注释掉原来的attributeRepository和attrRepoBackingMap</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"attributeRepository"</span> <span class="attr">class</span>=<span class="string">"org.jasig.services.persondir.support.jdbc.SingleRowJdbcPersonAttributeDao"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"0"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"1"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span></div><div class="line">                select username,email,myid,EmployeeID,mobile,EmployType,Department,Gender  from uc_members where username=?</div><div class="line">            <span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"queryAttributeMapping"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">map</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"username"</span>/&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">map</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"resultAttributeMapping"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">map</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"email"</span> <span class="attr">value</span>=<span class="string">"email"</span> /&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"myid"</span> <span class="attr">value</span>=<span class="string">"myid"</span> /&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"EmployeeID"</span> <span class="attr">value</span>=<span class="string">"EmployeeID"</span> /&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"EmployType"</span> <span class="attr">value</span>=<span class="string">"EmployType"</span> /&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"Department"</span> <span class="attr">value</span>=<span class="string">"Department"</span> /&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">map</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="添加相应jar包"><a href="#添加相应jar包" class="headerlink" title="添加相应jar包"></a>添加相应jar包</h2><ul>
<li>cas-server-support-jdbc.4.2.1.jar</li>
<li>mchange-commons-java-0.2.10.jar</li>
<li>c3p0-0.9.5.1.jar</li>
<li>commons-collections-3.2.jar</li>
<li>commons-dbcp-1.2.1.jar</li>
<li>commons-pool-1.3.jar</li>
</ul>
<p>把相应jar包放入/webapps/cas/WEB-INF/lib下面</p>
<h2 id="最后的配置文件"><a href="#最后的配置文件" class="headerlink" title="最后的配置文件"></a>最后的配置文件</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="comment">&lt;!--</span></div><div class="line"><span class="comment">| deployerConfigContext.xml centralizes into one file some of the declarative configuration that</span></div><div class="line"><span class="comment">| all CAS deployers will need to modify.</span></div><div class="line"><span class="comment">|</span></div><div class="line"><span class="comment">| This file declares some of the Spring-managed JavaBeans that make up a CAS deployment.</span></div><div class="line"><span class="comment">| The beans declared in this file are instantiated at context initialization time by the Spring</span></div><div class="line"><span class="comment">| ContextLoaderListener declared in web.xml.  It finds this file because this</span></div><div class="line"><span class="comment">| file is among those declared in the context parameter "contextConfigLocation".</span></div><div class="line"><span class="comment">|</span></div><div class="line"><span class="comment">| By far the most common change you will need to make in this file is to change the last bean</span></div><div class="line"><span class="comment">| declaration to replace the default authentication handler with</span></div><div class="line"><span class="comment">| one implementing your approach for authenticating usernames and passwords.</span></div><div class="line"><span class="comment">+--&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></div><div class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></div><div class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></span></div><div class="line"><span class="tag">       <span class="attr">xmlns:c</span>=<span class="string">"http://www.springframework.org/schema/c"</span></span></div><div class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></div><div class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></div><div class="line"><span class="tag">       <span class="attr">xmlns:util</span>=<span class="string">"http://www.springframework.org/schema/util"</span></span></div><div class="line"><span class="tag">       <span class="attr">xmlns:sec</span>=<span class="string">"http://www.springframework.org/schema/security"</span></span></div><div class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></div><div class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd</span></span></div><div class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></div><div class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd</span></span></div><div class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd</span></span></div><div class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd"</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">util:map</span> <span class="attr">id</span>=<span class="string">"authenticationHandlersResolvers"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key-ref</span>=<span class="string">"proxyAuthenticationHandler"</span> <span class="attr">value-ref</span>=<span class="string">"proxyPrincipalResolver"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key-ref</span>=<span class="string">"primaryAuthenticationHandler"</span> <span class="attr">value-ref</span>=<span class="string">"primaryPrincipalResolver"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">util:map</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">util:list</span> <span class="attr">id</span>=<span class="string">"authenticationMetadataPopulators"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"successfulHandlerMetaDataPopulator"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"rememberMeAuthenticationMetaDataPopulator"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">util:list</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span>  <span class="attr">id</span>=<span class="string">"MD5PasswordEncoder"</span> <span class="attr">class</span>=<span class="string">"org.jasig.cas.authentication.handler.DefaultPasswordEncoder"</span> &gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span>  <span class="attr">value</span>=<span class="string">"MD5"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"primaryAuthenticationHandler"</span></span></div><div class="line"><span class="tag">           <span class="attr">class</span>=<span class="string">"org.jasig.cas.adaptors.jdbc.QueryDatabaseAuthenticationHandler"</span></span></div><div class="line"><span class="tag">           <span class="attr">p:dataSource-ref</span>=<span class="string">"dataSource"</span></span></div><div class="line"><span class="tag">           <span class="attr">p:passwordEncoder-ref</span>=<span class="string">"MD5PasswordEncoder"</span></span></div><div class="line"><span class="tag">           <span class="attr">p:sql</span>=<span class="string">"SELECT password FROM uc_members WHERE username=?"</span> /&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">alias</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">alias</span>=<span class="string">"queryEncodeDatabaseDataSource"</span> /&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span></span></div><div class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span></span></div><div class="line"><span class="tag">      <span class="attr">p:driverClass</span>=<span class="string">"com.mysql.jdbc.Driver"</span></span></div><div class="line"><span class="tag">      <span class="attr">p:jdbcUrl</span>=<span class="string">"jdbc:mysql://127.0.0.1:3306/ucenter?useUnicode=true"</span></span></div><div class="line"><span class="tag">      <span class="attr">p:user</span>=<span class="string">"root"</span></span></div><div class="line"><span class="tag">      <span class="attr">p:password</span>=<span class="string">"root"</span></span></div><div class="line"><span class="tag">      <span class="attr">p:initialPoolSize</span>=<span class="string">"1"</span></span></div><div class="line"><span class="tag">      <span class="attr">p:minPoolSize</span>=<span class="string">"1"</span></span></div><div class="line"><span class="tag">      <span class="attr">p:maxPoolSize</span>=<span class="string">"3"</span></span></div><div class="line"><span class="tag">      <span class="attr">p:maxIdleTimeExcessConnections</span>=<span class="string">"120"</span></span></div><div class="line"><span class="tag">      <span class="attr">p:checkoutTimeout</span>=<span class="string">"10000"</span></span></div><div class="line"><span class="tag">      <span class="attr">p:acquireIncrement</span>=<span class="string">"6"</span></span></div><div class="line"><span class="tag">      <span class="attr">p:acquireRetryAttempts</span>=<span class="string">"5"</span></span></div><div class="line"><span class="tag">      <span class="attr">p:acquireRetryDelay</span>=<span class="string">"2000"</span></span></div><div class="line"><span class="tag">      <span class="attr">p:idleConnectionTestPeriod</span>=<span class="string">"30"</span></span></div><div class="line"><span class="tag">      <span class="attr">p:preferredTestQuery</span>=<span class="string">"select 1"</span> /&gt;</span></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">&lt;!--&lt;alias name="acceptUsersAuthenticationHandler" alias="primaryAuthenticationHandler" /&gt; --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">alias</span> <span class="attr">name</span>=<span class="string">"personDirectoryPrincipalResolver"</span> <span class="attr">alias</span>=<span class="string">"primaryPrincipalResolver"</span> /&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 定制返回属性 --&gt;</span></div><div class="line">    <span class="comment">&lt;!--</span></div><div class="line"><span class="comment">    &lt;bean id="attributeRepository" class="org.jasig.services.persondir.support.NamedStubPersonAttributeDao"</span></div><div class="line"><span class="comment">          p:backingMap-ref="attrRepoBackingMap" /&gt;</span></div><div class="line"><span class="comment">    &lt;util:map id="attrRepoBackingMap"&gt;</span></div><div class="line"><span class="comment">        &lt;entry key="uid" value="uid" /&gt;</span></div><div class="line"><span class="comment">        &lt;entry key="eduPersonAffiliation" value="eduPersonAffiliation" /&gt;</span></div><div class="line"><span class="comment">        &lt;entry key="groupMembership" value="groupMembership" /&gt;</span></div><div class="line"><span class="comment">        &lt;entry&gt;</span></div><div class="line"><span class="comment">            &lt;key&gt;&lt;value&gt;memberOf&lt;/value&gt;&lt;/key&gt;</span></div><div class="line"><span class="comment">            &lt;list&gt;</span></div><div class="line"><span class="comment">                &lt;value&gt;faculty&lt;/value&gt;</span></div><div class="line"><span class="comment">                &lt;value&gt;staff&lt;/value&gt;</span></div><div class="line"><span class="comment">                &lt;value&gt;org&lt;/value&gt;</span></div><div class="line"><span class="comment">            &lt;/list&gt;</span></div><div class="line"><span class="comment">        &lt;/entry&gt;</span></div><div class="line"><span class="comment">    &lt;/util:map&gt;--&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"attributeRepository"</span> <span class="attr">class</span>=<span class="string">"org.jasig.services.persondir.support.jdbc.SingleRowJdbcPersonAttributeDao"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"0"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"1"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span></div><div class="line">                select username,email,myid,EmployeeID,mobile,EmployType,Department,Gender  from uc_members where username=?</div><div class="line">            <span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"queryAttributeMapping"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">map</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"username"</span>/&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">map</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"resultAttributeMapping"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">map</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"email"</span> <span class="attr">value</span>=<span class="string">"email"</span> /&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"myid"</span> <span class="attr">value</span>=<span class="string">"myid"</span> /&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"EmployeeID"</span> <span class="attr">value</span>=<span class="string">"EmployeeID"</span> /&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"EmployType"</span> <span class="attr">value</span>=<span class="string">"EmployType"</span> /&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"Department"</span> <span class="attr">value</span>=<span class="string">"Department"</span> /&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">map</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 定制返回属性 end --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">alias</span> <span class="attr">name</span>=<span class="string">"serviceThemeResolver"</span> <span class="attr">alias</span>=<span class="string">"themeResolver"</span> /&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">alias</span> <span class="attr">name</span>=<span class="string">"jsonServiceRegistryDao"</span> <span class="attr">alias</span>=<span class="string">"serviceRegistryDao"</span> /&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">alias</span> <span class="attr">name</span>=<span class="string">"defaultTicketRegistry"</span> <span class="attr">alias</span>=<span class="string">"ticketRegistry"</span> /&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">alias</span> <span class="attr">name</span>=<span class="string">"ticketGrantingTicketExpirationPolicy"</span> <span class="attr">alias</span>=<span class="string">"grantingTicketExpirationPolicy"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">alias</span> <span class="attr">name</span>=<span class="string">"multiTimeUseOrTimeoutExpirationPolicy"</span> <span class="attr">alias</span>=<span class="string">"serviceTicketExpirationPolicy"</span> /&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">alias</span> <span class="attr">name</span>=<span class="string">"anyAuthenticationPolicy"</span> <span class="attr">alias</span>=<span class="string">"authenticationPolicy"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">alias</span> <span class="attr">name</span>=<span class="string">"acceptAnyAuthenticationPolicyFactory"</span> <span class="attr">alias</span>=<span class="string">"authenticationPolicyFactory"</span> /&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"auditTrailManager"</span></span></div><div class="line"><span class="tag">          <span class="attr">class</span>=<span class="string">"org.jasig.inspektr.audit.support.Slf4jLoggingAuditTrailManager"</span></span></div><div class="line"><span class="tag">          <span class="attr">p:entrySeparator</span>=<span class="string">"$&#123;cas.audit.singleline.separator:|&#125;"</span></span></div><div class="line"><span class="tag">          <span class="attr">p:useSingleLine</span>=<span class="string">"$&#123;cas.audit.singleline:false&#125;"</span>/&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">alias</span> <span class="attr">name</span>=<span class="string">"neverThrottle"</span> <span class="attr">alias</span>=<span class="string">"authenticationThrottle"</span> /&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">util:list</span> <span class="attr">id</span>=<span class="string">"monitorsList"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"memoryMonitor"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"sessionMonitor"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">util:list</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">alias</span> <span class="attr">name</span>=<span class="string">"defaultPrincipalFactory"</span> <span class="attr">alias</span>=<span class="string">"principalFactory"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">alias</span> <span class="attr">name</span>=<span class="string">"defaultAuthenticationTransactionManager"</span> <span class="attr">alias</span>=<span class="string">"authenticationTransactionManager"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">alias</span> <span class="attr">name</span>=<span class="string">"defaultPrincipalElectionStrategy"</span> <span class="attr">alias</span>=<span class="string">"principalElectionStrategy"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">alias</span> <span class="attr">name</span>=<span class="string">"tgcCipherExecutor"</span> <span class="attr">alias</span>=<span class="string">"defaultCookieCipherExecutor"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="替换CAS-Server-界面"><a href="#替换CAS-Server-界面" class="headerlink" title="替换CAS Server 界面"></a>替换CAS Server 界面</h2><blockquote>
<p>页面在目录 cas/WEB-INF/view/jsp/default下</p>
</blockquote>
<p>有4个页面是必须的：</p>
<ul>
<li>casConfirmView.jsp: 当用户选择了“ warn ”时会看到的确认界面</li>
<li>casGenericSuccess.jsp: 在用户成功通过认证而没有目的Service时会看到的界面</li>
<li>casLoginView.jsp: 当需要用户提供认证信息时会出现的界面</li>
<li>casLogoutView.jsp: 当用户结束 CAS 单点登录系统会话时出现的界面</li>
</ul>
<p>重新启动tomcat  浏览器打开<a href="http://sso.jason-li.cn:8080/cas/login" target="_blank" rel="external">http://sso.jason-li.cn:8080/cas/login</a> 从数据库中找到一个账号 登录  OK 成功 进行下一步</p>
<h1 id="部署客户端应用"><a href="#部署客户端应用" class="headerlink" title="部署客户端应用"></a>部署客户端应用</h1><h2 id="与CAS-Server建立信任关系"><a href="#与CAS-Server建立信任关系" class="headerlink" title="与CAS Server建立信任关系"></a>与CAS Server建立信任关系</h2><h2 id="引入CAS-client-jar包"><a href="#引入CAS-client-jar包" class="headerlink" title="引入CAS client jar包"></a>引入CAS client jar包</h2><blockquote>
<p>我们这里使用shiro做权限控制并与CAS集成</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-ehcache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;shiro.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;shiro.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-cas<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;shiro-cas.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="shiro-properties"><a href="#shiro-properties" class="headerlink" title="shiro.properties"></a>shiro.properties</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">shiro.loginUrl=http://127.0.0.1:8080/cas/login?service=http://127.0.0.1:8081/</div><div class="line">shiro.logoutUrl=http://127.0.0.1:8080/cas/logout?service=http://127.0.0.1:8081/</div><div class="line">shiro.cas.serverUrlPrefix=http://127.0.0.1:8080/cas</div><div class="line">shiro.cas.service=http://127.0.0.1:8081/</div><div class="line">shiro.failureUrl=/html/couponManager.html</div><div class="line">shiro.successUrl=/html/couponManager.html</div></pre></td></tr></table></figure>
<h2 id="applicationContext-shiro-xml"><a href="#applicationContext-shiro-xml" class="headerlink" title="applicationContext-shiro.xml"></a>applicationContext-shiro.xml</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></div><div class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></div><div class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></div><div class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/beans</span></span></div><div class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></div><div class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd"</span></span></div><div class="line"><span class="tag">    &gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span></span></div><div class="line"><span class="tag">            <span class="attr">location</span>=<span class="string">"classpath:conf/shiro.properties"</span></span></div><div class="line"><span class="tag">            <span class="attr">ignore-unresolvable</span>=<span class="string">"true"</span> /&gt;</span></div><div class="line"><span class="comment">&lt;!-- Shiro Filter --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"shiroFilter"</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.spring.web.ShiroFilterFactoryBean"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"securityManager"</span> <span class="attr">ref</span>=<span class="string">"securityManager"</span> /&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 设定用户的登录链接，这里为cas登录页面的链接地址可配置回调地址 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"loginUrl"</span> <span class="attr">value</span>=<span class="string">"$&#123;shiro.loginUrl&#125;"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"filters"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">map</span>&gt;</span></div><div class="line">            <span class="comment">&lt;!-- 添加casFilter到shiroFilter --&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"casFilter"</span> <span class="attr">value-ref</span>=<span class="string">"casFilter"</span> /&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"logoutFilter"</span> <span class="attr">value-ref</span>=<span class="string">"logoutFilter"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">map</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"filterChainDefinitions"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span></div><div class="line">            /easyui/** = anon</div><div class="line">            /static/** = anon</div><div class="line">            /assets/** = anon</div><div class="line">            /logout = logoutFilter</div><div class="line">            /html/** = authc</div><div class="line">            /coupon/**=user</div><div class="line">            /couponBatch/**=user</div><div class="line">            /transaction/**=user</div><div class="line">            /bindCoupon/**=user</div><div class="line">            /couponProductRelation/**=user</div><div class="line">            /** = casFilter</div><div class="line">        <span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"casFilter"</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.cas.CasFilter"</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 配置验证错误时的失败页面 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"failureUrl"</span> <span class="attr">value</span>=<span class="string">"$&#123;shiro.failureUrl&#125;"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"successUrl"</span> <span class="attr">value</span>=<span class="string">"$&#123;shiro.successUrl&#125;"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"logoutFilter"</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.web.filter.authc.LogoutFilter"</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 配置验证错误时的失败页面 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"redirectUrl"</span> <span class="attr">value</span>=<span class="string">"$&#123;shiro.logoutUrl&#125;"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"casRealm"</span> <span class="attr">class</span>=<span class="string">"com.bybon.coupon.web.auth.UserRealm"</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 认证通过后的默认角色 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"defaultRoles"</span> <span class="attr">value</span>=<span class="string">"ROLE_USER"</span> /&gt;</span></div><div class="line"><span class="comment">&lt;!-- cas服务端地址前缀 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"casServerUrlPrefix"</span> <span class="attr">value</span>=<span class="string">"$&#123;shiro.cas.serverUrlPrefix&#125;"</span> /&gt;</span></div><div class="line"><span class="comment">&lt;!-- 应用服务地址，用来接收cas服务端票据 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"casService"</span> <span class="attr">value</span>=<span class="string">"$&#123;shiro.cas.service&#125;"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">&lt;!-- Shiro's main business-tier object for web-enabled applications --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"securityManager"</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.web.mgt.DefaultWebSecurityManager"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"subjectFactory"</span> <span class="attr">ref</span>=<span class="string">"casSubjectFactory"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"realm"</span> <span class="attr">ref</span>=<span class="string">"casRealm"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"casSubjectFactory"</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.cas.CasSubjectFactory"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">bean</span></span></div><div class="line"><span class="tag"><span class="attr">class</span>=<span class="string">"org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"securityManager"</span> <span class="attr">ref</span>=<span class="string">"securityManager"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"lifecycleBeanPostProcessor"</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.spring.LifecycleBeanPostProcessor"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span></span></div><div class="line"><span class="tag"><span class="attr">class</span>=<span class="string">"org.springframework.beans.factory.config.MethodInvokingFactoryBean"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"staticMethod"</span></span></div><div class="line"><span class="tag">          <span class="attr">value</span>=<span class="string">"org.apache.shiro.SecurityUtils.setSecurityManager"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"arguments"</span> <span class="attr">ref</span>=<span class="string">"securityManager"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="UserRealm"><a href="#UserRealm" class="headerlink" title="UserRealm"></a>UserRealm</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.Map;</div><div class="line"><span class="keyword">import</span> java.util.concurrent.ConcurrentHashMap;</div><div class="line"><span class="keyword">import</span> org.apache.shiro.SecurityUtils;</div><div class="line"><span class="keyword">import</span> org.apache.shiro.authc.AuthenticationInfo;</div><div class="line"><span class="keyword">import</span> org.apache.shiro.authc.AuthenticationToken;</div><div class="line"><span class="keyword">import</span> org.apache.shiro.authz.AuthorizationInfo;</div><div class="line"><span class="keyword">import</span> org.apache.shiro.authz.SimpleAuthorizationInfo;</div><div class="line"><span class="keyword">import</span> org.apache.shiro.cas.CasRealm;</div><div class="line"><span class="keyword">import</span> org.apache.shiro.subject.PrincipalCollection;</div><div class="line"></div><div class="line"><span class="comment">/**<span class="doctag">@description</span> 用户授权信息域</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span> lilixin</span></div><div class="line"><span class="comment"> * <span class="doctag">@description</span></span></div><div class="line"><span class="comment"> * <span class="doctag">@create</span> 2017-08-25 10:26 AM</span></div><div class="line"><span class="comment"> **/</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserRealm</span> <span class="keyword">extends</span> <span class="title">CasRealm</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="comment">//    @Resource</span></div><div class="line"><span class="comment">//    private RoleService roleService;</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//    @Resource</span></div><div class="line"><span class="comment">//    private UserService userService;</span></div><div class="line"></div><div class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> Map&lt;String, SimpleAuthorizationInfo&gt; roles = <span class="keyword">new</span> ConcurrentHashMap&lt;String, SimpleAuthorizationInfo&gt;();</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 设置角色和权限信息</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> AuthorizationInfo <span class="title">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principals)</span> </span>&#123;</div><div class="line"></div><div class="line">        String account = (String) principals.getPrimaryPrincipal();</div><div class="line">        SimpleAuthorizationInfo authorizationInfo = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">if</span> (authorizationInfo == <span class="keyword">null</span>) &#123;</div><div class="line"><span class="comment">//            authorizationInfo = new SimpleAuthorizationInfo();</span></div><div class="line"><span class="comment">//            authorizationInfo.addStringPermissions(roleService.getPermissions(account));</span></div><div class="line"><span class="comment">//            authorizationInfo.addRoles(roleService.getRoles(account));</span></div><div class="line">            roles.put(account, authorizationInfo);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> authorizationInfo;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 1、CAS认证 ,验证用户身份</span></div><div class="line"><span class="comment">     * 2、将用户基本信息设置到会话中</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken token)</span> </span>&#123;</div><div class="line"></div><div class="line">        AuthenticationInfo authc = <span class="keyword">super</span>.doGetAuthenticationInfo(token);</div><div class="line">        String account = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">if</span>(authc != <span class="keyword">null</span>)&#123;</div><div class="line">            account = (String) authc.getPrincipals().getPrimaryPrincipal();</div><div class="line">        &#125;</div><div class="line">        User user = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">if</span>(account != <span class="keyword">null</span>)&#123;</div><div class="line">            user = <span class="keyword">null</span>;<span class="comment">//userService.getUserByAccount(account);</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        SecurityUtils.getSubject().getSession().setAttribute(<span class="string">"user"</span>, user);</div><div class="line"></div><div class="line">        <span class="keyword">return</span> authc;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="filterChainDefinitions过滤器配置"><a href="#filterChainDefinitions过滤器配置" class="headerlink" title="filterChainDefinitions过滤器配置"></a>filterChainDefinitions过滤器配置</h2><p>Shiro内置有FilterChain ，Shiro验证URL时,URL匹配成功便不再继续匹配查找，详细见官网 ，通常可将这些过滤器分为两组</p>
<h3 id="认证过滤器"><a href="#认证过滤器" class="headerlink" title="认证过滤器"></a>认证过滤器</h3><p>anon,authc,authcBasic,user</p>
<h3 id="授权过滤器"><a href="#授权过滤器" class="headerlink" title="授权过滤器"></a>授权过滤器</h3><p>perms,port,rest,roles,ssl</p>
<blockquote>
<p> 注意user和authc不同：当应用开启了rememberMe时,用户下次访问时可以是一个user,但绝不会是authc,因为authc是需要重新认证的,user表示用户不一定已通过认证,只要曾被Shiro记住过登录状态的用户就可以正常发起请求,比如rememberMe,说白了,以前的一个用户登录时开启了rememberMe,然后他关闭浏览器,下次再访问时他就是一个user,而不会authc</p>
</blockquote>
<h4 id="举几个例子"><a href="#举几个例子" class="headerlink" title="举几个例子"></a>举几个例子</h4><p>/admin=authc,roles[admin]      表示用户必需已通过认证,并拥有admin角色才可以正常发起’/admin’请求</p>
<p>/home=user                     表示用户不一定需要已经通过认证,只需要曾经被Shiro记住过登录状态就可以正常发起’/home’请求</p>
<h2 id="Web-xml中配置filter"><a href="#Web-xml中配置filter" class="headerlink" title="Web.xml中配置filter"></a>Web.xml中配置filter</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>shiroFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.DelegatingFilterProxy<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>targetFilterLifecycle<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>shiroFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>注意到 DelegatingFilterProxy  它会自动的把filter请求交给相应名称的bean处理，也就是我们在shiro-xml中配置的shiroFilter</p>
</blockquote>
<h2 id="获取登录信息"><a href="#获取登录信息" class="headerlink" title="获取登录信息"></a>获取登录信息</h2><h1 id="CAS-Server集群session共享"><a href="#CAS-Server集群session共享" class="headerlink" title="CAS Server集群session共享"></a>CAS Server集群session共享</h1><h1 id="客户端集群session共享"><a href="#客户端集群session共享" class="headerlink" title="客户端集群session共享"></a>客户端集群session共享</h1>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[CORS on Nginx 实现JS跨域教程]]></title>
      <url>/2017/08/14/CORS-on-Nginx-%E5%AE%9E%E7%8E%B0JS%E8%B7%A8%E5%9F%9F%E6%95%99%E7%A8%8B/</url>
      <content type="html"><![CDATA[<h1 id="什么是跨域"><a href="#什么是跨域" class="headerlink" title="什么是跨域"></a>什么是跨域</h1><blockquote>
<p>简单地理解就是因为JavaScript同源策略的限制，a.com 域名下的js无法操作b.com或是c.a.com域名下的对象。</p>
</blockquote>
<h3 id="同源是指相同的协议、域名、端口。"><a href="#同源是指相同的协议、域名、端口。" class="headerlink" title="同源是指相同的协议、域名、端口。"></a>同源是指相同的协议、域名、端口。</h3><h3 id="特别注意两点："><a href="#特别注意两点：" class="headerlink" title="特别注意两点："></a>特别注意两点：</h3><p>如果是协议和端口造成的跨域问题“前台”是无能为力的，<br>在跨域问题上，域仅仅是通过“协议+域名+端口”来识别，两个不同的域名即便指向同一个ip地址，也是跨域的。</p>
<h1 id="跨域解决方案之CORS"><a href="#跨域解决方案之CORS" class="headerlink" title="跨域解决方案之CORS"></a>跨域解决方案之CORS</h1><blockquote>
<p>CORS: 跨域资源共享(Cross-Origin Resource Sharing)</p>
</blockquote>
<h1 id="Nginx配置"><a href="#Nginx配置" class="headerlink" title="Nginx配置"></a>Nginx配置</h1><blockquote>
<p>对于简单请求，如GET，只需要在HTTP Response后添加Access-Control-Allow-Origin。<br>对于非简单请求，比如POST、PUT、DELETE等，浏览器会分两次应答。第一次preflight（method: OPTIONS），主要验证来源是否合法，并返回允许的Header等。第二次才是真正的HTTP应答。所以服务器必须处理OPTIONS应答。</p>
</blockquote>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"> <span class="attribute">if</span> (<span class="variable">$request_method</span> = <span class="string">'OPTIONS'</span>) &#123;</div><div class="line">    <span class="attribute">add_header</span> <span class="string">'Access-Control-Allow-Origin'</span> <span class="string">'*'</span>;</div><div class="line">    <span class="attribute">add_header</span> <span class="string">'Access-Control-Allow-Methods'</span> <span class="string">'GET, POST, OPTIONS'</span>;</div><div class="line">    <span class="attribute">add_header</span> <span class="string">'Access-Control-Allow-Headers'</span> <span class="string">'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Content-Range,Range'</span>;</div><div class="line"></div><div class="line">    <span class="attribute">add_header</span> <span class="string">'Access-Control-Max-Age'</span> <span class="number">1728000</span>;</div><div class="line">    <span class="attribute">add_header</span> <span class="string">'Content-Type'</span> <span class="string">'text/plain; charset=utf-8'</span>;</div><div class="line">    <span class="attribute">add_header</span> <span class="string">'Content-Length'</span> <span class="number">0</span>;</div><div class="line">    <span class="attribute">return</span> <span class="number">204</span>;</div><div class="line">   &#125;</div><div class="line"><span class="attribute">if</span> (<span class="variable">$request_method</span> = <span class="string">'POST'</span>) &#123;</div><div class="line">    <span class="attribute">add_header</span> <span class="string">'Access-Control-Allow-Origin'</span> <span class="string">'*'</span>;</div><div class="line">    <span class="attribute">add_header</span> <span class="string">'Access-Control-Allow-Methods'</span> <span class="string">'GET, POST, OPTIONS'</span>;</div><div class="line">    <span class="attribute">add_header</span> <span class="string">'Access-Control-Allow-Headers'</span> <span class="string">'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Content-Range,Range'</span>;</div><div class="line">    <span class="attribute">add_header</span> <span class="string">'Access-Control-Expose-Headers'</span> <span class="string">'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Content-Range,Range'</span>;</div><div class="line">     &#125;</div><div class="line"><span class="attribute">if</span> (<span class="variable">$request_method</span> = <span class="string">'GET'</span>) &#123;</div><div class="line">    <span class="attribute">add_header</span> <span class="string">'Access-Control-Allow-Origin'</span> <span class="string">'*'</span>;</div><div class="line">    <span class="attribute">add_header</span> <span class="string">'Access-Control-Allow-Methods'</span> <span class="string">'GET, POST, OPTIONS'</span>;</div><div class="line">    <span class="attribute">add_header</span> <span class="string">'Access-Control-Allow-Headers'</span> <span class="string">'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Content-Range,Range'</span>;</div><div class="line">    <span class="attribute">add_header</span> <span class="string">'Access-Control-Expose-Headers'</span> <span class="string">'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Content-Range,Range'</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>把上面配置放入nginx server配置中的location配置下即可实现跨域</p>
</blockquote>
<h1 id="配置详解"><a href="#配置详解" class="headerlink" title="配置详解"></a>配置详解</h1><p><a href="https://enable-cors.org/server_nginx.html" target="_blank" rel="external">点我跳转</a></p>
<h1 id="前台代码"><a href="#前台代码" class="headerlink" title="前台代码"></a>前台代码</h1><blockquote>
<p>此页面在oa.lilixin.top域下</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"../easyui/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> &gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">"send"</span>&gt;</span>ajax<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> &gt;</span><span class="undefined"></span></div><div class="line"><span class="undefined">    $("#send").click(function () &#123;</span></div><div class="line"><span class="undefined">        $.ajax(&#123;</span></div><div class="line"><span class="undefined">            url : 'http://api.lilixin.top/cors/test',</span></div><div class="line"><span class="undefined">            type : "GET",</span></div><div class="line"><span class="undefined">            async : false,</span></div><div class="line"><span class="undefined">            success : function(data) &#123;</span></div><div class="line"><span class="undefined">                alert(data)</span></div><div class="line"><span class="undefined">            &#125;</span></div><div class="line"><span class="undefined">        &#125;);</span></div><div class="line"><span class="undefined">    &#125;)</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h1 id="后台代码"><a href="#后台代码" class="headerlink" title="后台代码"></a>后台代码</h1><blockquote>
<p>后台代码部署在api.lilixin.top下</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span> lilixin</span></div><div class="line"><span class="comment"> * <span class="doctag">@description</span></span></div><div class="line"><span class="comment"> * <span class="doctag">@create</span> 2017-08-09 4:42 PM</span></div><div class="line"><span class="comment"> **/</span></div><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"cors"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CORSController</span></span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(CORSController.class);</div><div class="line"></div><div class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"test"</span>, method = &#123; RequestMethod.POST, RequestMethod.GET &#125;)</div><div class="line">    <span class="keyword">public</span> <span class="meta">@ResponseBody</span></div><div class="line">    <span class="function">String <span class="title">test</span><span class="params">()</span></span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="string">"成功获取"</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h1 id="nginx实例配置"><a href="#nginx实例配置" class="headerlink" title="nginx实例配置"></a>nginx实例配置</h1><h4 id="api配置"><a href="#api配置" class="headerlink" title="api配置"></a>api配置</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">upstream</span> api.lilixin.top &#123;   </div><div class="line">      <span class="attribute">server</span> <span class="number">127.0.0.1:8082</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"> <span class="section">server</span> &#123;</div><div class="line">        <span class="attribute">listen</span>       <span class="number">80</span>;</div><div class="line">        <span class="attribute">server_name</span>  api.lilixin.top;</div><div class="line"></div><div class="line">        <span class="comment">#charset koi8-r;</span></div><div class="line"></div><div class="line">        <span class="attribute">access_log</span>  /logs/api.access.log  myFormat;</div><div class="line"></div><div class="line">        <span class="attribute">location</span> / &#123;</div><div class="line">            <span class="attribute">root</span>   html;</div><div class="line">            <span class="attribute">index</span>  index.html index.htm;</div><div class="line">            <span class="attribute">proxy_pass</span>  http://api.lilixin.top;</div><div class="line"></div><div class="line"></div><div class="line">            <span class="attribute">if</span> (<span class="variable">$request_method</span> = <span class="string">'OPTIONS'</span>) &#123;</div><div class="line">		        <span class="attribute">add_header</span> <span class="string">'Access-Control-Allow-Origin'</span> <span class="string">'*'</span>;</div><div class="line">		        <span class="attribute">add_header</span> <span class="string">'Access-Control-Allow-Methods'</span> <span class="string">'GET, POST, OPTIONS'</span>;</div><div class="line">		        <span class="comment">#</span></div><div class="line">		        <span class="comment"># Custom headers and headers various browsers *should* be OK with but aren't</span></div><div class="line">		        <span class="comment">#</span></div><div class="line">		        <span class="attribute">add_header</span> <span class="string">'Access-Control-Allow-Headers'</span> <span class="string">'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Content-Range,Range'</span>;</div><div class="line">		        <span class="comment">#</span></div><div class="line">		        <span class="comment"># Tell client that this pre-flight info is valid for 20 days</span></div><div class="line">		        <span class="comment">#</span></div><div class="line">		        <span class="attribute">add_header</span> <span class="string">'Access-Control-Max-Age'</span> <span class="number">1728000</span>;</div><div class="line">		        <span class="attribute">add_header</span> <span class="string">'Content-Type'</span> <span class="string">'text/plain; charset=utf-8'</span>;</div><div class="line">		        <span class="attribute">add_header</span> <span class="string">'Content-Length'</span> <span class="number">0</span>;</div><div class="line">		        <span class="attribute">return</span> <span class="number">204</span>;</div><div class="line">		     &#125;</div><div class="line">		    <span class="attribute">if</span> (<span class="variable">$request_method</span> = <span class="string">'POST'</span>) &#123;</div><div class="line">		        <span class="attribute">add_header</span> <span class="string">'Access-Control-Allow-Origin'</span> <span class="string">'*'</span>;</div><div class="line">		        <span class="attribute">add_header</span> <span class="string">'Access-Control-Allow-Methods'</span> <span class="string">'GET, POST, OPTIONS'</span>;</div><div class="line">		        <span class="attribute">add_header</span> <span class="string">'Access-Control-Allow-Headers'</span> <span class="string">'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Content-Range,Range'</span>;</div><div class="line">		        <span class="attribute">add_header</span> <span class="string">'Access-Control-Expose-Headers'</span> <span class="string">'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Content-Range,Range'</span>;</div><div class="line">		     &#125;</div><div class="line">		    <span class="attribute">if</span> (<span class="variable">$request_method</span> = <span class="string">'GET'</span>) &#123;</div><div class="line">		        <span class="attribute">add_header</span> <span class="string">'Access-Control-Allow-Origin'</span> <span class="string">'*'</span>;</div><div class="line">		        <span class="attribute">add_header</span> <span class="string">'Access-Control-Allow-Methods'</span> <span class="string">'GET, POST, OPTIONS'</span>;</div><div class="line">		        <span class="attribute">add_header</span> <span class="string">'Access-Control-Allow-Headers'</span> <span class="string">'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Content-Range,Range'</span>;</div><div class="line">		        <span class="attribute">add_header</span> <span class="string">'Access-Control-Expose-Headers'</span> <span class="string">'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Content-Range,Range'</span>;</div><div class="line">		     &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="attribute">error_page</span>   <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span>  /50x.html;</div><div class="line">        <span class="attribute">location</span> = /50x.html &#123;</div><div class="line">            <span class="attribute">root</span>   html;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h4 id="oa配置"><a href="#oa配置" class="headerlink" title="oa配置"></a>oa配置</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">upstream</span> oa.lilixin.top &#123;   </div><div class="line">     <span class="attribute">server</span> <span class="number">127.0.0.1:8081</span>;</div><div class="line">   &#125; </div><div class="line"></div><div class="line"><span class="section">server</span> &#123;</div><div class="line">       <span class="attribute">listen</span>       <span class="number">80</span>;</div><div class="line">       <span class="attribute">server_name</span>  oa.lilixin.top;</div><div class="line"></div><div class="line">       <span class="comment">#charset koi8-r;</span></div><div class="line"></div><div class="line">       <span class="attribute">access_log</span>  /logs/oa.access.log  myFormat;</div><div class="line"></div><div class="line">       <span class="attribute">location</span> / &#123;</div><div class="line">           <span class="attribute">root</span>   html;</div><div class="line">           <span class="attribute">index</span>  index.html index.htm;</div><div class="line">           <span class="attribute">proxy_pass</span>  http://oa.lilixin.top;</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       <span class="attribute">error_page</span>   <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span>  /50x.html;</div><div class="line">       <span class="attribute">location</span> = /50x.html &#123;</div><div class="line">           <span class="attribute">root</span>   html;</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Mongodb Gridfs实现图片存储解决方案]]></title>
      <url>/2017/08/11/Mongodb-Gridfs%E5%AE%9E%E7%8E%B0%E5%9B%BE%E7%89%87%E5%AD%98%E5%82%A8%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
      <content type="html"><![CDATA[<h1 id="引入Maven依赖"><a href="#引入Maven依赖" class="headerlink" title="引入Maven依赖"></a>引入Maven依赖</h1><blockquote>
<p>mongodb 3.x 与2.x版本有很大不同 这里选用2.x版本</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mongodb<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mongo-java-driver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.13.0-rc0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.data<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-data-mongodb<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<h1 id="mongoDB集成spring"><a href="#mongoDB集成spring" class="headerlink" title="mongoDB集成spring"></a>mongoDB集成spring</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></div><div class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></div><div class="line"><span class="tag"></span></div><div class="line"><span class="tag">       <span class="attr">xmlns:mongo</span>=<span class="string">"http://www.springframework.org/schema/data/mongo"</span></span></div><div class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></div><div class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans</span></span></div><div class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></div><div class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></div><div class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context/spring-context.xsd</span></span></div><div class="line"><span class="tag"><span class="string"></span></span></div><div class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/data/mongo</span></span></div><div class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/data/mongo/spring-mongo.xsd</span></span></div><div class="line"><span class="tag"><span class="string">        "</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath*:conf/mongo.properties"</span>/&gt;</span></div><div class="line"></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">mongo:mongo-client</span> <span class="attr">host</span>=<span class="string">"$&#123;mongo.host&#125;"</span> <span class="attr">port</span>=<span class="string">"$&#123;mongo.port&#125;"</span> <span class="attr">id</span>=<span class="string">"mongo"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">mongo:client-options</span></span></div><div class="line">                write-concern="SAFE" &lt;!--有密码时为SAFE--&gt;</div><div class="line">                connections-per-host="$&#123;mongo.connectionsPerHost&#125;"</div><div class="line">                min-connections-per-host="$&#123;mongo.minConnectionsPerHost&#125;"</div><div class="line">                threads-allowed-to-block-for-connection-multiplier="$&#123;mongo.threadsAllowedToBlockForConnectionMultiplier&#125;"</div><div class="line">                connect-timeout="$&#123;mongo.connectTimeout&#125;"</div><div class="line">                max-wait-time="$&#123;mongo.maxWaitTime&#125;"</div><div class="line">                socket-keep-alive="$&#123;mongo.socketKeepAlive&#125;"</div><div class="line">                socket-timeout="$&#123;mongo.socketTimeout&#125;"</div><div class="line">                description="$&#123;mongo.description&#125;"</div><div class="line">                max-connection-idle-time="$&#123;mongo.maxConnectionIdleTime&#125;"</div><div class="line">                max-connection-life-time="$&#123;mongo.maxConnectionLifeTime&#125;"</div><div class="line">                heartbeat-socket-timeout="$&#123;mongo.heartbeatSocketTimeout&#125;"</div><div class="line">                heartbeat-connect-timeout="$&#123;mongo.heartbeatConnectTimeout&#125;"</div><div class="line">                min-heartbeat-frequency="$&#123;mongo.minHeartbeatFrequency&#125;"</div><div class="line">                heartbeat-frequency="$&#123;mongo.heartbeatFrequency&#125;"</div><div class="line"></div><div class="line">        /&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">mongo:mongo-client</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">&lt;!--&lt;/mongo:mongo&gt;--&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 设置使用的数据库 名--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">mongo:db-factory</span> <span class="attr">dbname</span>=<span class="string">"$&#123;mongo.defaultDbName&#125;"</span> <span class="attr">mongo-ref</span>=<span class="string">"mongo"</span> <span class="attr">username</span>=<span class="string">"$&#123;mongo.user&#125;"</span> <span class="attr">password</span>=<span class="string">"$&#123;mongo.pwd&#125;"</span>/&gt;</span></div><div class="line">    <span class="comment">&lt;!-- mongodb的模板 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"mongoTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.data.mongodb.core.MongoTemplate"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"mongoDbFactory"</span> <span class="attr">ref</span>=<span class="string">"mongoDbFactory"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure>
<h1 id="属性文件"><a href="#属性文件" class="headerlink" title="属性文件"></a>属性文件</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">#mongo.host=127.0.0.1</div><div class="line">mongo.port=27017</div><div class="line">mongo.defaultDbName=mongo_db</div><div class="line">mongo.user=root</div><div class="line">mongo.pwd=mypassword</div><div class="line"></div><div class="line">mongo.connectionsPerHost=10</div><div class="line">mongo.threadsAllowedToBlockForConnectionMultiplier=5</div><div class="line">mongo.minConnectionsPerHost=5</div><div class="line">#连接超时时间</div><div class="line">mongo.connectTimeout=10000</div><div class="line">#等待时间</div><div class="line">mongo.maxWaitTime=120000</div><div class="line">#Socket超时时间</div><div class="line">mongo.socketTimeout=0</div><div class="line">mongo.socketKeepAlive=true</div><div class="line"></div><div class="line">mongo.description=bybon pic mongodb</div><div class="line">mongo.maxConnectionIdleTime=1500</div><div class="line">mongo.maxConnectionLifeTime=0</div><div class="line">#mongo slave</div><div class="line">mongo.heartbeatSocketTimeout=1000</div><div class="line">mongo.heartbeatConnectTimeout=1500</div><div class="line">mongo.minHeartbeatFrequency=5</div><div class="line">mongo.heartbeatFrequency=10</div></pre></td></tr></table></figure>
<p>#待续</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[git 常用命令]]></title>
      <url>/2017/08/11/git-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h1 id="创建版本库"><a href="#创建版本库" class="headerlink" title="创建版本库"></a>创建版本库</h1><blockquote>
<p>把当前目录初始化为git版本仓库</p>
</blockquote>
<pre><code>$ git init
</code></pre><h1 id="查看当前仓库状态"><a href="#查看当前仓库状态" class="headerlink" title="查看当前仓库状态"></a>查看当前仓库状态</h1><pre><code>$ git status
</code></pre><h1 id="查看某一文件不同"><a href="#查看某一文件不同" class="headerlink" title="查看某一文件不同"></a>查看某一文件不同</h1><pre><code>$ git diff
</code></pre><h1 id="查看工作区和版本库的区别"><a href="#查看工作区和版本库的区别" class="headerlink" title="查看工作区和版本库的区别"></a>查看工作区和版本库的区别</h1><pre><code>$ git diff HEAD -- 文件名
</code></pre><h1 id="添加文件到仓库"><a href="#添加文件到仓库" class="headerlink" title="添加文件到仓库"></a>添加文件到仓库</h1><pre><code>$ git add 
</code></pre><h1 id="提交文件到仓库"><a href="#提交文件到仓库" class="headerlink" title="提交文件到仓库"></a>提交文件到仓库</h1><pre><code>$ git commit -m &apos;this is comment&apos;
</code></pre><h1 id="查看历史提交记录"><a href="#查看历史提交记录" class="headerlink" title="查看历史提交记录"></a>查看历史提交记录</h1><pre><code>$ git log
</code></pre><h1 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h1><pre><code>$ git reset --hard HEAD 
</code></pre><blockquote>
<p>HEAD的位置还可以写成git log 显示出来的版本号</p>
</blockquote>
<h1 id="放弃更改"><a href="#放弃更改" class="headerlink" title="放弃更改"></a>放弃更改</h1><pre><code>$ git checkout -- 文件名
</code></pre><blockquote>
<p>放弃工作区的更改 未执行 git add 之前才可以 </p>
</blockquote>
<h1 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h1><pre><code>$ git rm filename 
</code></pre><blockquote>
<p>执行rm后要commit 才行</p>
</blockquote>
<h1 id="推送到远程仓库"><a href="#推送到远程仓库" class="headerlink" title="推送到远程仓库"></a>推送到远程仓库</h1><pre><code>$ git push
</code></pre><h1 id="添加账号信息"><a href="#添加账号信息" class="headerlink" title="添加账号信息"></a>添加账号信息</h1><pre><code>$ git config --global user.name &quot;lilixin&quot;
$ git config --global user.email lilixin0507@163.com
$ git config --global user.password mypassword
</code></pre><h1 id="仓库克隆"><a href="#仓库克隆" class="headerlink" title="仓库克隆"></a>仓库克隆</h1><pre><code>$ git clone git@github.com:lilixin/gitskills.git
</code></pre><h1 id="查看远程仓库信息"><a href="#查看远程仓库信息" class="headerlink" title="查看远程仓库信息"></a>查看远程仓库信息</h1><pre><code>$ git remote -v
</code></pre><h1 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h1><pre><code>$ git branch dev
</code></pre><h1 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h1><pre><code>$ git checkout dev
</code></pre><blockquote>
<p>git checkout -b dev 相当于上面两条命令 创建并切换分支</p>
</blockquote>
<h1 id="查看所有分支"><a href="#查看所有分支" class="headerlink" title="查看所有分支"></a>查看所有分支</h1><pre><code>$ git branch
</code></pre><h1 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h1><pre><code>$ git merge dev
</code></pre><blockquote>
<p>把dev分支合并到master分支上</p>
</blockquote>
<h1 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h1><pre><code>$ git branch -d dev
</code></pre><h1 id="保存当前工作区"><a href="#保存当前工作区" class="headerlink" title="保存当前工作区"></a>保存当前工作区</h1><pre><code>$ git stash
</code></pre><h1 id="查看保存的工作区列表"><a href="#查看保存的工作区列表" class="headerlink" title="查看保存的工作区列表"></a>查看保存的工作区列表</h1><pre><code>$ git stash list
</code></pre><h1 id="恢复工作区并删除"><a href="#恢复工作区并删除" class="headerlink" title="恢复工作区并删除"></a>恢复工作区并删除</h1><pre><code>$ git stash pop
</code></pre><h1 id="打标签"><a href="#打标签" class="headerlink" title="打标签"></a>打标签</h1><pre><code>$ git tag v1.0
</code></pre><blockquote>
<p>对历史提交版本打标签 git tag v1.0 版本号</p>
</blockquote>
<h1 id="查看标签"><a href="#查看标签" class="headerlink" title="查看标签"></a>查看标签</h1><pre><code>$ git tag
</code></pre><blockquote>
<p>查看标签说明 git show <tagname></tagname></p>
</blockquote>
<h1 id="删除标签"><a href="#删除标签" class="headerlink" title="删除标签"></a>删除标签</h1><pre><code>$ git tag -d v0.9
</code></pre><h1 id="别名"><a href="#别名" class="headerlink" title="别名"></a>别名</h1><pre><code>$ git config --global alias.co checkout
$ git config --global alias.ci commit
$ git config --global alias.br branch
</code></pre><blockquote>
<p>这样以后使用 co ci br 命令更方便操作</p>
</blockquote>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Maven 解决依赖冲突问题]]></title>
      <url>/2017/08/10/Maven-%E8%A7%A3%E5%86%B3%E4%BE%9D%E8%B5%96%E5%86%B2%E7%AA%81%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<h1 id="依赖冲突"><a href="#依赖冲突" class="headerlink" title="依赖冲突"></a>依赖冲突</h1><h3 id="最常遇到的一个冲突"><a href="#最常遇到的一个冲突" class="headerlink" title="最常遇到的一个冲突"></a>最常遇到的一个冲突</h3><p>日志相关jar包的冲突问题 </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">SLF4J: Class path contains multiple SLF4J bindings.</div><div class="line">SLF4J: Found binding <span class="keyword">in</span> [jar:file:/Users/lilixin/IdeaProjects/coupon_leeco/coupon_new_oa/target/coupon_new_oa-0.0.1-SNAPSHOT/WEB-INF/lib/log4j-slf4j-impl-2.3.jar!/org/slf4j/impl/StaticLoggerBinder.class]</div><div class="line">SLF4J: Found binding <span class="keyword">in</span> [jar:file:/Users/lilixin/IdeaProjects/coupon_leeco/coupon_new_oa/target/coupon_new_oa-0.0.1-SNAPSHOT/WEB-INF/lib/slf4j-log4j12-1.6.6.jar!/org/slf4j/impl/StaticLoggerBinder.class]</div><div class="line">SLF4J: See http://www.slf4j.org/codes.html<span class="comment">#multiple_bindings for an explanation.</span></div><div class="line">SLF4J: Actual binding is of <span class="built_in">type</span> [org.apache.logging.slf4j.Log4jLoggerFactory</div></pre></td></tr></table></figure>
<h1 id="解决流程"><a href="#解决流程" class="headerlink" title="解决流程"></a>解决流程</h1><h2 id="首先确定多个jar包来源"><a href="#首先确定多个jar包来源" class="headerlink" title="首先确定多个jar包来源"></a>首先确定多个jar包来源</h2><h4 id="到项目目录执行"><a href="#到项目目录执行" class="headerlink" title="到项目目录执行"></a>到项目目录执行</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mvn dependency:tree</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">[INFO] Scanning for projects...</div><div class="line">[INFO]</div><div class="line">[INFO] ------------------------------------------------------------------------</div><div class="line">[INFO] Building coupon_new_oa 0.0.1-SNAPSHOT</div><div class="line">[INFO] ------------------------------------------------------------------------</div><div class="line">[INFO]</div><div class="line">[INFO] --- maven-dependency-plugin:2.8:tree (default-cli) @ coupon_new_oa ---</div><div class="line">[INFO] com.bybon.coupon:coupon_new_oa:war:0.0.1-SNAPSHOT</div><div class="line">[INFO] +- org.springframework.data:spring-data-redis:jar:1.0.2.RELEASE:compile</div><div class="line">[INFO] |  +- log4j:log4j:jar:1.2.17:runtime</div><div class="line">[INFO] |  \- org.slf4j:slf4j-log4j12:jar:1.6.6:runtime</div><div class="line">[INFO] +- org.springframework:spring-context:jar:4.1.5.RELEASE:compile</div><div class="line">[INFO] |  \- org.springframework:spring-expression:jar:4.1.5.RELEASE:compile</div><div class="line">[INFO] +- org.springframework:spring-context-support:jar:4.1.5.RELEASE:compile</div><div class="line">[INFO] +- org.springframework:spring-aop:jar:4.1.5.RELEASE:compile</div><div class="line">[INFO] |  \- aopalliance:aopalliance:jar:1.0:compile</div><div class="line">[INFO] +- org.springframework:spring-web:jar:4.1.5.RELEASE:compile</div><div class="line">[INFO] +- org.springframework:spring-webmvc:jar:4.1.5.RELEASE:compile</div><div class="line">[INFO] +- org.springframework:spring-beans:jar:4.1.5.RELEASE:compile</div><div class="line">[INFO] +- org.springframework:spring-core:jar:4.1.5.RELEASE:compile</div><div class="line">[INFO] +- org.springframework:spring-tx:jar:4.1.5.RELEASE:compile</div><div class="line">[INFO] +- org.springframework:spring-orm:jar:4.1.5.RELEASE:compile</div><div class="line">[INFO] |  \- org.springframework:spring-jdbc:jar:4.1.5.RELEASE:compile</div><div class="line">[INFO] +- org.springframework:spring-aspects:jar:4.1.5.RELEASE:compile</div><div class="line">[INFO] +- org.springframework:spring-test:jar:4.1.5.RELEASE:test</div><div class="line">[INFO] +- cglib:cglib-nodep:jar:3.1:compile</div><div class="line">[INFO] +- org.aspectj:aspectjrt:jar:1.8.5:compile</div><div class="line">[INFO] +- org.aspectj:aspectjweaver:jar:1.8.5:compile</div><div class="line">[INFO] +- mysql:mysql-connector-java:jar:5.1.34:compile</div><div class="line">[INFO] +- org.mybatis:mybatis:jar:3.2.8:compile</div><div class="line">[INFO] +- org.mybatis:mybatis-spring:jar:1.2.2:compile</div><div class="line">[INFO] +- com.alibaba:druid:jar:0.2.9:compile</div><div class="line">[INFO] +- javax.servlet:javax.servlet-api:jar:3.1.0:provided</div><div class="line">[INFO] +- com.alibaba:fastjson:jar:1.2.4:compile</div><div class="line">[INFO] +- org.slf4j:slf4j-api:jar:1.7.10:compile</div><div class="line">[INFO] +- org.apache.logging.log4j:log4j-slf4j-impl:jar:2.3:compile</div><div class="line">[INFO] |  \- org.apache.logging.log4j:log4j-api:jar:2.3:compile</div><div class="line">[INFO] +- org.apache.logging.log4j:log4j-core:jar:2.3:compile</div><div class="line">[INFO] +- org.slf4j:jcl-over-slf4j:jar:1.7.12:compile</div></pre></td></tr></table></figure>
<h4 id="找到冲突的两个jar包来源"><a href="#找到冲突的两个jar包来源" class="headerlink" title="找到冲突的两个jar包来源"></a>找到冲突的两个jar包来源</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">slf4j-log4j12:jar:1.6.6 来自于spring-data-redis</div><div class="line">log4j-slf4j-impl:jar:2.3 为主动引入</div></pre></td></tr></table></figure>
<h4 id="在pom-xml中去除一个-我们这里去除spring-data-redis里引入的"><a href="#在pom-xml中去除一个-我们这里去除spring-data-redis里引入的" class="headerlink" title="在pom.xml中去除一个 我们这里去除spring-data-redis里引入的"></a>在pom.xml中去除一个 我们这里去除spring-data-redis里引入的</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.data<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.2.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">					<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">				<span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="然后再编译打包就解决此冲突了，其它冲突同理"><a href="#然后再编译打包就解决此冲突了，其它冲突同理" class="headerlink" title="然后再编译打包就解决此冲突了，其它冲突同理"></a>然后再编译打包就解决此冲突了，其它冲突同理</h3><h1 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h1><h3 id="还可以使用mvn-dependency-analyze来分析你引入的依赖"><a href="#还可以使用mvn-dependency-analyze来分析你引入的依赖" class="headerlink" title="还可以使用mvn dependency:analyze来分析你引入的依赖"></a>还可以使用mvn dependency:analyze来分析你引入的依赖</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">[INFO] --- maven-dependency-plugin:2.8:analyze (default-cli) @ coupon_new_oa ---</div><div class="line">[WARNING] Used undeclared dependencies found:</div><div class="line">[WARNING]    org.springframework:spring-jdbc:jar:4.1.5.RELEASE:compile</div><div class="line">[WARNING]    org.apache.httpcomponents:httpcore:jar:4.4:compile</div><div class="line">[WARNING] Unused declared dependencies found:</div><div class="line">[WARNING]    org.springframework.data:spring-data-redis:jar:1.0.2.RELEASE:compile</div><div class="line">[WARNING]    org.springframework:spring-context-support:jar:4.1.5.RELEASE:compile</div><div class="line">[WARNING]    org.springframework:spring-aop:jar:4.1.5.RELEASE:compile</div><div class="line">[WARNING]    org.springframework:spring-orm:jar:4.1.5.RELEASE:compile</div><div class="line">[WARNING]    org.springframework:spring-aspects:jar:4.1.5.RELEASE:compile</div><div class="line">[WARNING]    org.springframework:spring-test:jar:4.1.5.RELEASE:<span class="built_in">test</span></div></pre></td></tr></table></figure>
<h3 id="上面会列出使用的但未声明的和未使用的但声明了的依赖，根据提示册子多余的依赖，但实际开发中发我发现很多包实际上使用了-所以删除时要小心"><a href="#上面会列出使用的但未声明的和未使用的但声明了的依赖，根据提示册子多余的依赖，但实际开发中发我发现很多包实际上使用了-所以删除时要小心" class="headerlink" title="上面会列出使用的但未声明的和未使用的但声明了的依赖，根据提示册子多余的依赖，但实际开发中发我发现很多包实际上使用了  所以删除时要小心"></a>上面会列出使用的但未声明的和未使用的但声明了的依赖，根据提示册子多余的依赖，但实际开发中发我发现很多包实际上使用了  所以删除时要小心</h3>]]></content>
      
        
        <tags>
            
            <tag> maven </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HttpClient使用]]></title>
      <url>/2017/08/08/HttpClient%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<h1 id="引入jar"><a href="#引入jar" class="headerlink" title="引入jar"></a>引入jar</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.httpcomponents<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>httpclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>4.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<h1 id="工具类"><a href="#工具类" class="headerlink" title="工具类"></a>工具类</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> top.lilixin.util;<span class="comment">/**</span></div><div class="line"><span class="comment"> * Created by lilixin on 08/08/2017.</span></div><div class="line"><span class="comment"> */</span></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span> lilixin</span></div><div class="line"><span class="comment"> * <span class="doctag">@create</span> 2017-08-08 3:18 PM</span></div><div class="line"><span class="comment"> **/</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.http.HttpEntity;</div><div class="line"><span class="keyword">import</span> org.apache.http.NameValuePair;</div><div class="line"><span class="keyword">import</span> org.apache.http.ParseException;</div><div class="line"><span class="keyword">import</span> org.apache.http.client.ClientProtocolException;</div><div class="line"><span class="keyword">import</span> org.apache.http.client.entity.UrlEncodedFormEntity;</div><div class="line"><span class="keyword">import</span> org.apache.http.client.methods.CloseableHttpResponse;</div><div class="line"><span class="keyword">import</span> org.apache.http.client.methods.HttpGet;</div><div class="line"><span class="keyword">import</span> org.apache.http.client.methods.HttpPost;</div><div class="line"><span class="keyword">import</span> org.apache.http.impl.client.CloseableHttpClient;</div><div class="line"><span class="keyword">import</span> org.apache.http.impl.client.HttpClients;</div><div class="line"><span class="keyword">import</span> org.apache.http.message.BasicNameValuePair;</div><div class="line"><span class="keyword">import</span> org.apache.http.util.EntityUtils;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.io.UnsupportedEncodingException;</div><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"><span class="keyword">import</span> java.util.Map;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpClientUtil</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 发送 post请求访问本地应用并根据传递参数不同返回不同结果</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">post</span><span class="params">(String url,Map&lt;String,String&gt; params)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="comment">// 创建默认的httpClient实例.</span></div><div class="line">        CloseableHttpClient httpclient = HttpClients.createDefault();</div><div class="line">        <span class="comment">// 创建httppost</span></div><div class="line">        HttpPost httppost = <span class="keyword">new</span> HttpPost(url);</div><div class="line">        <span class="comment">// 创建参数队列</span></div><div class="line">        List&lt;NameValuePair&gt; formparams = <span class="keyword">new</span> ArrayList&lt;NameValuePair&gt;();</div><div class="line">        <span class="keyword">for</span> (String pkey : params.keySet()) &#123;</div><div class="line">            formparams.add(<span class="keyword">new</span> BasicNameValuePair(pkey, params.get(pkey)));</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        UrlEncodedFormEntity uefEntity;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            uefEntity = <span class="keyword">new</span> UrlEncodedFormEntity(formparams, <span class="string">"UTF-8"</span>);</div><div class="line">            httppost.setEntity(uefEntity);</div><div class="line">            CloseableHttpResponse response = httpclient.execute(httppost);</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                HttpEntity entity = response.getEntity();</div><div class="line">                <span class="keyword">if</span> (entity != <span class="keyword">null</span>) &#123;</div><div class="line">                    <span class="keyword">return</span> EntityUtils.toString(entity, <span class="string">"UTF-8"</span>);</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">finally</span> &#123;</div><div class="line">                <span class="keyword">if</span>(response != <span class="keyword">null</span>)&#123;</div><div class="line">                    response.close();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (ClientProtocolException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e1) &#123;</div><div class="line">            e1.printStackTrace();</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            <span class="comment">// 关闭连接,释放资源</span></div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                <span class="keyword">if</span>(httpclient != <span class="keyword">null</span>)&#123;</div><div class="line">                    httpclient.close();</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 发送 get请求</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">get</span><span class="params">(String url)</span> </span>&#123;</div><div class="line">        CloseableHttpClient httpclient = HttpClients.createDefault();</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="comment">// 创建httpget.</span></div><div class="line">            HttpGet httpget = <span class="keyword">new</span> HttpGet(url);</div><div class="line">            <span class="comment">// 执行get请求.</span></div><div class="line">            CloseableHttpResponse response = <span class="keyword">null</span>;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                response = httpclient.execute(httpget);</div><div class="line">                <span class="comment">// 获取响应实体</span></div><div class="line">                HttpEntity entity = response.getEntity();</div><div class="line">                <span class="comment">// 打印响应状态</span></div><div class="line">                <span class="keyword">if</span> (entity != <span class="keyword">null</span>) &#123;</div><div class="line">                    <span class="keyword">return</span> EntityUtils.toString(entity);</div><div class="line">                &#125;</div><div class="line"></div><div class="line">            &#125; <span class="keyword">catch</span> (ClientProtocolException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125; <span class="keyword">catch</span> (ParseException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line"></div><div class="line">        &#125;<span class="keyword">finally</span> &#123;</div><div class="line">            <span class="keyword">if</span> (httpclient != <span class="keyword">null</span>)&#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    httpclient.close();</div><div class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[javax Mail邮件发送实例]]></title>
      <url>/2017/08/07/javax-Mail%E9%82%AE%E4%BB%B6%E5%8F%91%E9%80%81%E5%AE%9E%E4%BE%8B/</url>
      <content type="html"><![CDATA[<h1 id="使用javax-mail包发送邮件"><a href="#使用javax-mail包发送邮件" class="headerlink" title="使用javax.mail包发送邮件"></a>使用javax.mail包发送邮件</h1><h3 id="注意别引错包"><a href="#注意别引错包" class="headerlink" title="注意别引错包"></a>注意别引错包</h3><p>有的jar没有包含sun的实现，只包含了api，这类jar名称通常为javax.mail-api-x.x.x.jar 在使用smtp协议发邮件过程中会报错：java.lang.ClassNotFoundException: com.sun.mail.util.MailLogger </p>
<p>另一种jar是包含了sun的实现的，名称通常为javax.mail-x.x.x.jar，使用smtp协议发邮件正常！</p>
<h1 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> javax.mail.Message;  </div><div class="line"><span class="keyword">import</span> javax.mail.Session;  </div><div class="line"><span class="keyword">import</span> javax.mail.Transport;  </div><div class="line"><span class="keyword">import</span> javax.mail.internet.InternetAddress;  </div><div class="line"><span class="keyword">import</span> javax.mail.internet.MimeMessage;  </div><div class="line"><span class="keyword">import</span> java.util.Date;  </div><div class="line"><span class="keyword">import</span> java.util.Properties;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">	 * <span class="doctag">@author</span> lilixin</span></div><div class="line"><span class="comment">	 * <span class="doctag">@param</span> sendTo</span></div><div class="line"><span class="comment">	 * <span class="doctag">@param</span> content</span></div><div class="line"><span class="comment">	 * <span class="doctag">@param</span> subject</span></div><div class="line"><span class="comment">	 * <span class="doctag">@throws</span> MessagingException</span></div><div class="line"><span class="comment">	 */</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sendHtmlMail</span><span class="params">(String sendTo,String content,String subject)</span> <span class="keyword">throws</span> MessagingException</span>&#123;</div><div class="line">		Properties props = <span class="keyword">new</span> Properties(); <span class="comment">//可以加载一个配置文件</span></div><div class="line">		<span class="comment">// 使用smtp：简单邮件传输协议</span></div><div class="line">		props.put(<span class="string">"mail.smtp.host"</span>, <span class="string">"smtp.163.com"</span>);<span class="comment">//存储发送邮件服务器的信息</span></div><div class="line">		props.put(<span class="string">"mail.smtp.auth"</span>, <span class="string">"true"</span>);<span class="comment">//同时通过验证</span></div><div class="line"></div><div class="line">		Session session = Session.getInstance(props);<span class="comment">//根据属性新建一个邮件会话</span></div><div class="line"></div><div class="line">		MimeMessage message = <span class="keyword">new</span> MimeMessage(session);<span class="comment">//由邮件会话新建一个消息对象</span></div><div class="line">		message.setFrom(<span class="keyword">new</span> InternetAddress(<span class="string">"lilixin0507@163.com"</span>));<span class="comment">//设置发件人的地址</span></div><div class="line">		message.setRecipient(Message.RecipientType.TO, <span class="keyword">new</span> InternetAddress(sendTo));<span class="comment">//设置收件人,并设置其接收类型为TO</span></div><div class="line">		message.setSubject(subject);<span class="comment">//设置标题</span></div><div class="line">		<span class="comment">//设置信件内容</span></div><div class="line">		message.setContent(content, <span class="string">"text/html;charset=gbk"</span>); <span class="comment">//发送HTML邮件，内容样式比较丰富</span></div><div class="line">		message.setSentDate(<span class="keyword">new</span> Date());<span class="comment">//设置发信时间</span></div><div class="line">		message.saveChanges();<span class="comment">//存储邮件信息</span></div><div class="line"></div><div class="line">		<span class="comment">//发送邮件</span></div><div class="line">        Transport transport = session.getTransport(<span class="string">"smtp"</span>);</div><div class="line">		transport.connect(<span class="string">"lilixin0507@163.com"</span>, <span class="string">"mypassword"</span>);</div><div class="line">		transport.sendMessage(message, message.getAllRecipients());<span class="comment">//发送邮件,其中第二个参数是所有已设好的收件人地址</span></div><div class="line">		transport.close();</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">public static void main(String[] args)&#123;</div><div class="line">	    try &#123;</div><div class="line">            sendHtmlMail(&quot;lilixin0507@163.com&quot;, &quot;this is a ttt mail&quot;, &quot;这是我的一封邮件&quot;);</div><div class="line">        &#125; catch (MessagingException e) &#123;</div><div class="line">            // TODO Auto-generated catch block</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[spring实战]]></title>
      <url>/2017/08/04/spring%E5%AE%9E%E6%88%98/</url>
      <content type="html"><![CDATA[<h1 id="Spring框架学习笔记一"><a href="#Spring框架学习笔记一" class="headerlink" title="Spring框架学习笔记一"></a>Spring框架学习笔记一</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Spring是分层的一站式轻量级开源框架，这里分层指的SUN提供的EE的三层结构，既WEB层、业务层、数据访问层。一站式指的是Spring对每一层都提供的解决方案，WEB层对应Spring Mvc 、业务层对应Spring的Bean管理、数据访问层提供了JDBC Template。</p>
<h2 id="Spring优点"><a href="#Spring优点" class="headerlink" title="Spring优点"></a>Spring优点</h2><ul>
<li>方便解耦，简化开发</li>
<li>AOP编程的支持</li>
<li>声明式事务的支持</li>
<li>方便程序的测试</li>
<li>方便集成各种优秀框架</li>
<li>降低JavaEE API的使用难度</li>
</ul>
<h2 id="入门程序"><a href="#入门程序" class="headerlink" title="入门程序"></a>入门程序</h2><h4 id="下载Spring的开发包"><a href="#下载Spring的开发包" class="headerlink" title="下载Spring的开发包"></a>下载Spring的开发包</h4><p>官网下载spring-framework-x.x.x.RELEASE-dist.zip 解压后把文件夹里的lib目录导入工程</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[quartz定时任务基础概念及使用]]></title>
      <url>/2017/08/02/quart%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E5%8F%8Aspring%E9%9B%86%E6%88%90/</url>
      <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote>
<p>Quartz是一个完全由Java编写的开源作业调度框架，为在Java应用程序中进行作业调度提供了简单却强大的机制。Quartz允许开发人员根据时间间隔来调度作业，它实现了<strong>作业</strong>和<strong>触发器</strong>的多对多的关系，还能把多个作业与不同的触发器关联  Quartz-1.x与Quartz-2.x在使用上差别较大 这里介绍2.x版本</p>
</blockquote>
<h2 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h2><h4 id="架构图"><a href="#架构图" class="headerlink" title="架构图"></a>架构图</h4><p><img src="http://ou1kontjz.bkt.clouddn.com/f651228241775a70872596ea21f936ae.jpg" alt=""></p>
<h4 id="核心接口及类"><a href="#核心接口及类" class="headerlink" title="核心接口及类"></a>核心接口及类</h4><ol>
<li><strong>Job</strong> ：任务 它是一个接口，只有一个方法<br>void execute(JobExecutionContext context)<br>开发者实现该接口来定义自己的任务 ，其中JobExecutionContext类提供了调度上下文的各种信息，Job运行时的信息保存在JobDataMap实例中</li>
<li><strong>JobDetail</strong>：Quartz在每次执行Job时，接受一个Job实现类，JobDetail 描述了Job实现类及其它相关的静态信息，如Job名字、描述、关联监听器等信息</li>
<li><strong>Trigger</strong>：是一个类，它描述了触发Job执行的时间规则，简单说就是设置作业执行的时间、参数、条件等，主要有SimpleTrigger和CronTrigger这两个子类。CronTrigger支持Cron表达式，可以定义出复杂的时间规则</li>
<li><strong>Calendar</strong>：org.quartz.Calendar和java.util.Calendar不同，它是一些日历特定时间点的集合,一个Trigger可以和多个Calendar关联，以便排除或包含某些时间点。</li>
<li><strong>Scheduler</strong>：调度器 代表一个Quartz的独立运行容器，负责调度作业和触发器，JobDetail和Trigger可以注册在Scheduler中，拥有各自唯一的组及名称，组及名称是Scheduler查找定位容器中某一对象的依据</li>
<li><strong>ThreadPool</strong>：Scheduler使用一个线程池作为任务运行的基础设施，任务通过共享线程池中的线程提高运行效率。</li>
</ol>
<h4 id="关系"><a href="#关系" class="headerlink" title="关系"></a>关系</h4><p>Scheduler把Trigger绑定到某一个JobDetail上，这样当Trigger触发时对应的Job就会执行。<strong>一个Job可以对应多个Trigger，但一个Trigger只能对应一个Job。</strong>可以通过SchedulerFactory创建一个Scheduler，Scheduler里有一个SchedulerContext，它保存着Scheduler上下文件信息，类似与ServletContext，Job和Trigger都可以访问它。SchedulerContext内部有一个Map，以键值对的形式维护着上下文件信息，可以通过Scheduler.getContext()获取SchedulerContext对象</p>
<h2 id="单独使用"><a href="#单独使用" class="headerlink" title="单独使用"></a>单独使用</h2><ol>
<li><p>官网下载quartz包，将核心依赖quartz-x.x.x.jar以及相关jar包导入工程中</p>
<blockquote>
<p>如果是Maven项目 引入依赖jar包<br><code>&lt;dependency&gt;  
 &lt;groupId&gt;org.quartz-scheduler&lt;/groupId&gt;    
 &lt;artifactId&gt;quartz&lt;/artifactId&gt;    
 &lt;version&gt;2.2.3&lt;/version&gt;    
&lt;/dependency&gt;</code></p>
</blockquote>
</li>
<li><p>编写job类</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> top.lilixin;</div><div class="line"><span class="keyword">import</span> org.quartz.Job;</div><div class="line"><span class="keyword">import</span> org.quartz.JobExecutionContext;</div><div class="line"><span class="keyword">import</span> org.quartz.JobExecutionException;</div><div class="line">	</div><div class="line"><span class="keyword">import</span> java.util.Date;</div><div class="line">	</div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Created by lilixin on 03/08/2017.</span></div><div class="line"><span class="comment"> */</span></div><div class="line"> </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyJob</span> <span class="keyword">implements</span> <span class="title">Job</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(JobExecutionContext context)</span> <span class="keyword">throws</span> JobExecutionException </span>&#123;</div><div class="line">        System.out.println(<span class="string">"my job is running ,time="</span>+<span class="keyword">new</span> Date());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>编写调度器</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> top.lilixin;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.quartz.*;</div><div class="line"><span class="keyword">import</span> org.quartz.impl.StdSchedulerFactory;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * created by lilixin</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTask</span></span></div><div class="line"><span class="class"></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">( String[] args )</span></span>&#123;</div><div class="line"></div><div class="line">        <span class="comment">//通过SchedulerFactory 获取调度器 scheduler</span></div><div class="line">        SchedulerFactory factory = <span class="keyword">new</span> StdSchedulerFactory();</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            Scheduler scheduler = factory.getScheduler();</div><div class="line"></div><div class="line">            <span class="comment">//引进作业程序</span></div><div class="line">            JobBuilder jobBuilder = JobBuilder.newJob();</div><div class="line">            JobDetail jobDetail = jobBuilder.newJob(MyJob.class).withIdentity(<span class="string">"job1"</span>,<span class="string">"group1"</span>).build();</div><div class="line">            <span class="comment">//新建一个时间</span></div><div class="line"></div><div class="line">            Trigger trigger = TriggerBuilder</div><div class="line">                    .newTrigger()</div><div class="line">                    .withIdentity(<span class="string">"trigger1"</span>,<span class="string">"group1"</span>)</div><div class="line">                    .startNow()</div><div class="line">                    .withSchedule(SimpleScheduleBuilder.simpleSchedule().withIntervalInSeconds(<span class="number">1</span>).repeatForever())</div><div class="line">                    .build();</div><div class="line">            <span class="comment">//作业和触发器设置到调度器里</span></div><div class="line">            scheduler.scheduleJob(jobDetail,trigger);</div><div class="line">            <span class="comment">//启动调度器</span></div><div class="line">            scheduler.start();</div><div class="line"></div><div class="line">        &#125; <span class="keyword">catch</span> (SchedulerException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="与spring集成使用"><a href="#与spring集成使用" class="headerlink" title="与spring集成使用"></a>与spring集成使用</h2>]]></content>
      
        
        <tags>
            
            <tag> quartz </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
